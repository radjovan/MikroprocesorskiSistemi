
PedometarSTM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f40  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  0800304c  0800304c  0001304c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030cc  080030cc  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080030cc  080030cc  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080030cc  080030cc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030cc  080030cc  000130cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080030d0  080030d0  000130d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080030d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  20000070  08003144  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000dc  08003144  000200dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004bcc  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000144c  00000000  00000000  00024c65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000548  00000000  00000000  000260b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000490  00000000  00000000  00026600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000162c1  00000000  00000000  00026a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006540  00000000  00000000  0003cd51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082a2e  00000000  00000000  00043291  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c5cbf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000017dc  00000000  00000000  000c5d10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003034 	.word	0x08003034

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003034 	.word	0x08003034

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__aeabi_f2iz>:
 8000608:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800060c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000610:	d30f      	bcc.n	8000632 <__aeabi_f2iz+0x2a>
 8000612:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000616:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800061a:	d90d      	bls.n	8000638 <__aeabi_f2iz+0x30>
 800061c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000620:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000624:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000628:	fa23 f002 	lsr.w	r0, r3, r2
 800062c:	bf18      	it	ne
 800062e:	4240      	negne	r0, r0
 8000630:	4770      	bx	lr
 8000632:	f04f 0000 	mov.w	r0, #0
 8000636:	4770      	bx	lr
 8000638:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800063c:	d101      	bne.n	8000642 <__aeabi_f2iz+0x3a>
 800063e:	0242      	lsls	r2, r0, #9
 8000640:	d105      	bne.n	800064e <__aeabi_f2iz+0x46>
 8000642:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000646:	bf08      	it	eq
 8000648:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800064c:	4770      	bx	lr
 800064e:	f04f 0000 	mov.w	r0, #0
 8000652:	4770      	bx	lr

08000654 <HAL_GPIO_EXTI_Callback>:

// na svaki klik ziroskop prelazi ugao od 20 stepeni i to znaci da je korisnik u mogucnosti da napravi korak
//samo mu jos nedostaje ubrzanje koje diktira potenciometar

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	80fb      	strh	r3, [r7, #6]
	if(IzracunatoUbrzanje >= 2.0)// preko 31% na potenciometru
 800065e:	4b07      	ldr	r3, [pc, #28]	; (800067c <HAL_GPIO_EXTI_Callback+0x28>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	2b01      	cmp	r3, #1
 8000664:	dd04      	ble.n	8000670 <HAL_GPIO_EXTI_Callback+0x1c>
	{
		brojKoraka++;
 8000666:	4b06      	ldr	r3, [pc, #24]	; (8000680 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	3301      	adds	r3, #1
 800066c:	4a04      	ldr	r2, [pc, #16]	; (8000680 <HAL_GPIO_EXTI_Callback+0x2c>)
 800066e:	6013      	str	r3, [r2, #0]
	}
}
 8000670:	bf00      	nop
 8000672:	370c      	adds	r7, #12
 8000674:	46bd      	mov	sp, r7
 8000676:	bc80      	pop	{r7}
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop
 800067c:	200000c0 	.word	0x200000c0
 8000680:	200000bc 	.word	0x200000bc

08000684 <main>:


int main(void)
{
 8000684:	b590      	push	{r4, r7, lr}
 8000686:	b08b      	sub	sp, #44	; 0x2c
 8000688:	af00      	add	r7, sp, #0

  HAL_Init();
 800068a:	f000 fb13 	bl	8000cb4 <HAL_Init>


  SystemClock_Config();
 800068e:	f000 f91b 	bl	80008c8 <SystemClock_Config>

  MX_GPIO_Init();
 8000692:	f000 f9a7 	bl	80009e4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000696:	f000 f967 	bl	8000968 <MX_ADC1_Init>

  LCD_init();
 800069a:	f000 f87d 	bl	8000798 <LCD_init>
  float res,rezultat;

  char stringBrKoraka[] = "Broj koraka: ";
 800069e:	4b37      	ldr	r3, [pc, #220]	; (800077c <main+0xf8>)
 80006a0:	f107 0410 	add.w	r4, r7, #16
 80006a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006a6:	c407      	stmia	r4!, {r0, r1, r2}
 80006a8:	8023      	strh	r3, [r4, #0]
  char buffer[10];

  while (1)
  {

	  	  HAL_Delay(100);
 80006aa:	2064      	movs	r0, #100	; 0x64
 80006ac:	f000 fb64 	bl	8000d78 <HAL_Delay>


	      HAL_ADC_Start(&hadc1);
 80006b0:	4833      	ldr	r0, [pc, #204]	; (8000780 <main+0xfc>)
 80006b2:	f000 fc5d 	bl	8000f70 <HAL_ADC_Start>
	      HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80006b6:	f04f 31ff 	mov.w	r1, #4294967295
 80006ba:	4831      	ldr	r0, [pc, #196]	; (8000780 <main+0xfc>)
 80006bc:	f000 fd32 	bl	8001124 <HAL_ADC_PollForConversion>
	      res = HAL_ADC_GetValue(&hadc1);
 80006c0:	482f      	ldr	r0, [pc, #188]	; (8000780 <main+0xfc>)
 80006c2:	f000 fe35 	bl	8001330 <HAL_ADC_GetValue>
 80006c6:	4603      	mov	r3, r0
 80006c8:	4618      	mov	r0, r3
 80006ca:	f7ff fdf5 	bl	80002b8 <__aeabi_ui2f>
 80006ce:	4603      	mov	r3, r0
 80006d0:	623b      	str	r3, [r7, #32]

	      HAL_Delay(100);
 80006d2:	2064      	movs	r0, #100	; 0x64
 80006d4:	f000 fb50 	bl	8000d78 <HAL_Delay>


	      IzracunatoUbrzanje = (res*10)/4095;
 80006d8:	492a      	ldr	r1, [pc, #168]	; (8000784 <main+0x100>)
 80006da:	6a38      	ldr	r0, [r7, #32]
 80006dc:	f7ff fe44 	bl	8000368 <__aeabi_fmul>
 80006e0:	4603      	mov	r3, r0
 80006e2:	4929      	ldr	r1, [pc, #164]	; (8000788 <main+0x104>)
 80006e4:	4618      	mov	r0, r3
 80006e6:	f7ff fef3 	bl	80004d0 <__aeabi_fdiv>
 80006ea:	4603      	mov	r3, r0
 80006ec:	4618      	mov	r0, r3
 80006ee:	f7ff ff8b 	bl	8000608 <__aeabi_f2iz>
 80006f2:	4603      	mov	r3, r0
 80006f4:	4a25      	ldr	r2, [pc, #148]	; (800078c <main+0x108>)
 80006f6:	6013      	str	r3, [r2, #0]

	      HAL_ADC_Stop(&hadc1);
 80006f8:	4821      	ldr	r0, [pc, #132]	; (8000780 <main+0xfc>)
 80006fa:	f000 fce7 	bl	80010cc <HAL_ADC_Stop>
	      LCD(0x01, 0); /* cistimo ekran */
 80006fe:	2100      	movs	r1, #0
 8000700:	2001      	movs	r0, #1
 8000702:	f000 f861 	bl	80007c8 <LCD>

	      int i = 0;
 8000706:	2300      	movs	r3, #0
 8000708:	627b      	str	r3, [r7, #36]	; 0x24

	      while(stringBrKoraka[i])
 800070a:	e00b      	b.n	8000724 <main+0xa0>
	      {
	      	  LCD(stringBrKoraka[i],1);
 800070c:	f107 0210 	add.w	r2, r7, #16
 8000710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000712:	4413      	add	r3, r2
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	2101      	movs	r1, #1
 8000718:	4618      	mov	r0, r3
 800071a:	f000 f855 	bl	80007c8 <LCD>
	      	  i++;
 800071e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000720:	3301      	adds	r3, #1
 8000722:	627b      	str	r3, [r7, #36]	; 0x24
	      while(stringBrKoraka[i])
 8000724:	f107 0210 	add.w	r2, r7, #16
 8000728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800072a:	4413      	add	r3, r2
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	2b00      	cmp	r3, #0
 8000730:	d1ec      	bne.n	800070c <main+0x88>
	      }
	      sprintf(buffer,"%d",brojKoraka);
 8000732:	4b17      	ldr	r3, [pc, #92]	; (8000790 <main+0x10c>)
 8000734:	681a      	ldr	r2, [r3, #0]
 8000736:	1d3b      	adds	r3, r7, #4
 8000738:	4916      	ldr	r1, [pc, #88]	; (8000794 <main+0x110>)
 800073a:	4618      	mov	r0, r3
 800073c:	f002 f800 	bl	8002740 <siprintf>
	      i=0;
 8000740:	2300      	movs	r3, #0
 8000742:	627b      	str	r3, [r7, #36]	; 0x24
	      while(buffer[i]){
 8000744:	e00a      	b.n	800075c <main+0xd8>
	      	  LCD(buffer[i],1);
 8000746:	1d3a      	adds	r2, r7, #4
 8000748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800074a:	4413      	add	r3, r2
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	2101      	movs	r1, #1
 8000750:	4618      	mov	r0, r3
 8000752:	f000 f839 	bl	80007c8 <LCD>
	      	  i++;
 8000756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000758:	3301      	adds	r3, #1
 800075a:	627b      	str	r3, [r7, #36]	; 0x24
	      while(buffer[i]){
 800075c:	1d3a      	adds	r2, r7, #4
 800075e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000760:	4413      	add	r3, r2
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d1ee      	bne.n	8000746 <main+0xc2>
	      }

	      LCD('  ',1);
 8000768:	2101      	movs	r1, #1
 800076a:	f242 0020 	movw	r0, #8224	; 0x2020
 800076e:	f000 f82b 	bl	80007c8 <LCD>
	      HAL_Delay(200);
 8000772:	20c8      	movs	r0, #200	; 0xc8
 8000774:	f000 fb00 	bl	8000d78 <HAL_Delay>
  {
 8000778:	e797      	b.n	80006aa <main+0x26>
 800077a:	bf00      	nop
 800077c:	08003050 	.word	0x08003050
 8000780:	2000008c 	.word	0x2000008c
 8000784:	41200000 	.word	0x41200000
 8000788:	457ff000 	.word	0x457ff000
 800078c:	200000c0 	.word	0x200000c0
 8000790:	200000bc 	.word	0x200000bc
 8000794:	0800304c 	.word	0x0800304c

08000798 <LCD_init>:
  /* USER CODE END 3 */
}


void LCD_init()
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
	LCD(0x38, 0); //2 lines, 5*7 matrix
 800079c:	2100      	movs	r1, #0
 800079e:	2038      	movs	r0, #56	; 0x38
 80007a0:	f000 f812 	bl	80007c8 <LCD>
	LCD(0x0C, 0); //Display on, cursor off
 80007a4:	2100      	movs	r1, #0
 80007a6:	200c      	movs	r0, #12
 80007a8:	f000 f80e 	bl	80007c8 <LCD>
	LCD(0x06, 0); //Increment cursor (shift to right)
 80007ac:	2100      	movs	r1, #0
 80007ae:	2006      	movs	r0, #6
 80007b0:	f000 f80a 	bl	80007c8 <LCD>
	LCD(0x01, 0); //Clear display screen
 80007b4:	2100      	movs	r1, #0
 80007b6:	2001      	movs	r0, #1
 80007b8:	f000 f806 	bl	80007c8 <LCD>
	LCD(0x80, 0); //Forse cursos to beginning (1st line)
 80007bc:	2100      	movs	r1, #0
 80007be:	2080      	movs	r0, #128	; 0x80
 80007c0:	f000 f802 	bl	80007c8 <LCD>
}
 80007c4:	bf00      	nop
 80007c6:	bd80      	pop	{r7, pc}

080007c8 <LCD>:

void LCD(uint8_t val_1, uint8_t cmd)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b084      	sub	sp, #16
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	4603      	mov	r3, r0
 80007d0:	460a      	mov	r2, r1
 80007d2:	71fb      	strb	r3, [r7, #7]
 80007d4:	4613      	mov	r3, r2
 80007d6:	71bb      	strb	r3, [r7, #6]
	uint8_t data1;

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, cmd); // set RS = cmd; (cmd=0)=>Command; (cmd=1) => data
 80007d8:	79bb      	ldrb	r3, [r7, #6]
 80007da:	461a      	mov	r2, r3
 80007dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007e0:	4838      	ldr	r0, [pc, #224]	; (80008c4 <LCD+0xfc>)
 80007e2:	f001 f9cf 	bl	8001b84 <HAL_GPIO_WritePin>

	data1 = val_1 & 0x01;
 80007e6:	79fb      	ldrb	r3, [r7, #7]
 80007e8:	f003 0301 	and.w	r3, r3, #1
 80007ec:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, data1);
 80007ee:	7bfb      	ldrb	r3, [r7, #15]
 80007f0:	461a      	mov	r2, r3
 80007f2:	2102      	movs	r1, #2
 80007f4:	4833      	ldr	r0, [pc, #204]	; (80008c4 <LCD+0xfc>)
 80007f6:	f001 f9c5 	bl	8001b84 <HAL_GPIO_WritePin>

	data1 = (val_1 >> 1) & 0x01;
 80007fa:	79fb      	ldrb	r3, [r7, #7]
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	b2db      	uxtb	r3, r3
 8000800:	f003 0301 	and.w	r3, r3, #1
 8000804:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, data1);
 8000806:	7bfb      	ldrb	r3, [r7, #15]
 8000808:	461a      	mov	r2, r3
 800080a:	2104      	movs	r1, #4
 800080c:	482d      	ldr	r0, [pc, #180]	; (80008c4 <LCD+0xfc>)
 800080e:	f001 f9b9 	bl	8001b84 <HAL_GPIO_WritePin>

	data1 = (val_1 >> 2) & 0x01;
 8000812:	79fb      	ldrb	r3, [r7, #7]
 8000814:	089b      	lsrs	r3, r3, #2
 8000816:	b2db      	uxtb	r3, r3
 8000818:	f003 0301 	and.w	r3, r3, #1
 800081c:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, data1);
 800081e:	7bfb      	ldrb	r3, [r7, #15]
 8000820:	461a      	mov	r2, r3
 8000822:	2108      	movs	r1, #8
 8000824:	4827      	ldr	r0, [pc, #156]	; (80008c4 <LCD+0xfc>)
 8000826:	f001 f9ad 	bl	8001b84 <HAL_GPIO_WritePin>

	data1 = (val_1 >> 3) & 0x01;
 800082a:	79fb      	ldrb	r3, [r7, #7]
 800082c:	08db      	lsrs	r3, r3, #3
 800082e:	b2db      	uxtb	r3, r3
 8000830:	f003 0301 	and.w	r3, r3, #1
 8000834:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, data1);
 8000836:	7bfb      	ldrb	r3, [r7, #15]
 8000838:	461a      	mov	r2, r3
 800083a:	2110      	movs	r1, #16
 800083c:	4821      	ldr	r0, [pc, #132]	; (80008c4 <LCD+0xfc>)
 800083e:	f001 f9a1 	bl	8001b84 <HAL_GPIO_WritePin>

	data1 = (val_1 >> 4) & 0x01;
 8000842:	79fb      	ldrb	r3, [r7, #7]
 8000844:	091b      	lsrs	r3, r3, #4
 8000846:	b2db      	uxtb	r3, r3
 8000848:	f003 0301 	and.w	r3, r3, #1
 800084c:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, data1);
 800084e:	7bfb      	ldrb	r3, [r7, #15]
 8000850:	461a      	mov	r2, r3
 8000852:	2120      	movs	r1, #32
 8000854:	481b      	ldr	r0, [pc, #108]	; (80008c4 <LCD+0xfc>)
 8000856:	f001 f995 	bl	8001b84 <HAL_GPIO_WritePin>

	data1 = (val_1 >> 5) & 0x01;
 800085a:	79fb      	ldrb	r3, [r7, #7]
 800085c:	095b      	lsrs	r3, r3, #5
 800085e:	b2db      	uxtb	r3, r3
 8000860:	f003 0301 	and.w	r3, r3, #1
 8000864:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, data1);
 8000866:	7bfb      	ldrb	r3, [r7, #15]
 8000868:	461a      	mov	r2, r3
 800086a:	2140      	movs	r1, #64	; 0x40
 800086c:	4815      	ldr	r0, [pc, #84]	; (80008c4 <LCD+0xfc>)
 800086e:	f001 f989 	bl	8001b84 <HAL_GPIO_WritePin>

	data1 = (val_1 >> 6) & 0x01;
 8000872:	79fb      	ldrb	r3, [r7, #7]
 8000874:	099b      	lsrs	r3, r3, #6
 8000876:	b2db      	uxtb	r3, r3
 8000878:	f003 0301 	and.w	r3, r3, #1
 800087c:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, data1);
 800087e:	7bfb      	ldrb	r3, [r7, #15]
 8000880:	461a      	mov	r2, r3
 8000882:	2180      	movs	r1, #128	; 0x80
 8000884:	480f      	ldr	r0, [pc, #60]	; (80008c4 <LCD+0xfc>)
 8000886:	f001 f97d 	bl	8001b84 <HAL_GPIO_WritePin>

	data1 = (val_1 >> 7) & 0x01;
 800088a:	79fb      	ldrb	r3, [r7, #7]
 800088c:	09db      	lsrs	r3, r3, #7
 800088e:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, data1);
 8000890:	7bfb      	ldrb	r3, [r7, #15]
 8000892:	461a      	mov	r2, r3
 8000894:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000898:	480a      	ldr	r0, [pc, #40]	; (80008c4 <LCD+0xfc>)
 800089a:	f001 f973 	bl	8001b84 <HAL_GPIO_WritePin>



		//Enable
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800089e:	2201      	movs	r2, #1
 80008a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008a4:	4807      	ldr	r0, [pc, #28]	; (80008c4 <LCD+0xfc>)
 80008a6:	f001 f96d 	bl	8001b84 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80008aa:	2005      	movs	r0, #5
 80008ac:	f000 fa64 	bl	8000d78 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80008b0:	2200      	movs	r2, #0
 80008b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008b6:	4803      	ldr	r0, [pc, #12]	; (80008c4 <LCD+0xfc>)
 80008b8:	f001 f964 	bl	8001b84 <HAL_GPIO_WritePin>
}
 80008bc:	bf00      	nop
 80008be:	3710      	adds	r7, #16
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	40010800 	.word	0x40010800

080008c8 <SystemClock_Config>:
void SystemClock_Config(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b094      	sub	sp, #80	; 0x50
 80008cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008d2:	2228      	movs	r2, #40	; 0x28
 80008d4:	2100      	movs	r1, #0
 80008d6:	4618      	mov	r0, r3
 80008d8:	f001 ff2a 	bl	8002730 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008dc:	f107 0314 	add.w	r3, r7, #20
 80008e0:	2200      	movs	r2, #0
 80008e2:	601a      	str	r2, [r3, #0]
 80008e4:	605a      	str	r2, [r3, #4]
 80008e6:	609a      	str	r2, [r3, #8]
 80008e8:	60da      	str	r2, [r3, #12]
 80008ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008ec:	1d3b      	adds	r3, r7, #4
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	605a      	str	r2, [r3, #4]
 80008f4:	609a      	str	r2, [r3, #8]
 80008f6:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008f8:	2302      	movs	r3, #2
 80008fa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008fc:	2301      	movs	r3, #1
 80008fe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000900:	2310      	movs	r3, #16
 8000902:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000904:	2300      	movs	r3, #0
 8000906:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000908:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800090c:	4618      	mov	r0, r3
 800090e:	f001 f969 	bl	8001be4 <HAL_RCC_OscConfig>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000918:	f000 f8ce 	bl	8000ab8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800091c:	230f      	movs	r3, #15
 800091e:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000920:	2300      	movs	r3, #0
 8000922:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000924:	2300      	movs	r3, #0
 8000926:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000928:	2300      	movs	r3, #0
 800092a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800092c:	2300      	movs	r3, #0
 800092e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000930:	f107 0314 	add.w	r3, r7, #20
 8000934:	2100      	movs	r1, #0
 8000936:	4618      	mov	r0, r3
 8000938:	f001 fbd6 	bl	80020e8 <HAL_RCC_ClockConfig>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000942:	f000 f8b9 	bl	8000ab8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000946:	2302      	movs	r3, #2
 8000948:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800094a:	2300      	movs	r3, #0
 800094c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800094e:	1d3b      	adds	r3, r7, #4
 8000950:	4618      	mov	r0, r3
 8000952:	f001 fd4d 	bl	80023f0 <HAL_RCCEx_PeriphCLKConfig>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800095c:	f000 f8ac 	bl	8000ab8 <Error_Handler>
  }
}
 8000960:	bf00      	nop
 8000962:	3750      	adds	r7, #80	; 0x50
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}

08000968 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b084      	sub	sp, #16
 800096c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800096e:	1d3b      	adds	r3, r7, #4
 8000970:	2200      	movs	r2, #0
 8000972:	601a      	str	r2, [r3, #0]
 8000974:	605a      	str	r2, [r3, #4]
 8000976:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000978:	4b18      	ldr	r3, [pc, #96]	; (80009dc <MX_ADC1_Init+0x74>)
 800097a:	4a19      	ldr	r2, [pc, #100]	; (80009e0 <MX_ADC1_Init+0x78>)
 800097c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800097e:	4b17      	ldr	r3, [pc, #92]	; (80009dc <MX_ADC1_Init+0x74>)
 8000980:	2200      	movs	r2, #0
 8000982:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000984:	4b15      	ldr	r3, [pc, #84]	; (80009dc <MX_ADC1_Init+0x74>)
 8000986:	2201      	movs	r2, #1
 8000988:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800098a:	4b14      	ldr	r3, [pc, #80]	; (80009dc <MX_ADC1_Init+0x74>)
 800098c:	2200      	movs	r2, #0
 800098e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000990:	4b12      	ldr	r3, [pc, #72]	; (80009dc <MX_ADC1_Init+0x74>)
 8000992:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000996:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000998:	4b10      	ldr	r3, [pc, #64]	; (80009dc <MX_ADC1_Init+0x74>)
 800099a:	2200      	movs	r2, #0
 800099c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800099e:	4b0f      	ldr	r3, [pc, #60]	; (80009dc <MX_ADC1_Init+0x74>)
 80009a0:	2201      	movs	r2, #1
 80009a2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009a4:	480d      	ldr	r0, [pc, #52]	; (80009dc <MX_ADC1_Init+0x74>)
 80009a6:	f000 fa0b 	bl	8000dc0 <HAL_ADC_Init>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80009b0:	f000 f882 	bl	8000ab8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80009b4:	2308      	movs	r3, #8
 80009b6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009b8:	2301      	movs	r3, #1
 80009ba:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80009bc:	2300      	movs	r3, #0
 80009be:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009c0:	1d3b      	adds	r3, r7, #4
 80009c2:	4619      	mov	r1, r3
 80009c4:	4805      	ldr	r0, [pc, #20]	; (80009dc <MX_ADC1_Init+0x74>)
 80009c6:	f000 fcbf 	bl	8001348 <HAL_ADC_ConfigChannel>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80009d0:	f000 f872 	bl	8000ab8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009d4:	bf00      	nop
 80009d6:	3710      	adds	r7, #16
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	2000008c 	.word	0x2000008c
 80009e0:	40012400 	.word	0x40012400

080009e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b086      	sub	sp, #24
 80009e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ea:	f107 0308 	add.w	r3, r7, #8
 80009ee:	2200      	movs	r2, #0
 80009f0:	601a      	str	r2, [r3, #0]
 80009f2:	605a      	str	r2, [r3, #4]
 80009f4:	609a      	str	r2, [r3, #8]
 80009f6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f8:	4b2b      	ldr	r3, [pc, #172]	; (8000aa8 <MX_GPIO_Init+0xc4>)
 80009fa:	699b      	ldr	r3, [r3, #24]
 80009fc:	4a2a      	ldr	r2, [pc, #168]	; (8000aa8 <MX_GPIO_Init+0xc4>)
 80009fe:	f043 0304 	orr.w	r3, r3, #4
 8000a02:	6193      	str	r3, [r2, #24]
 8000a04:	4b28      	ldr	r3, [pc, #160]	; (8000aa8 <MX_GPIO_Init+0xc4>)
 8000a06:	699b      	ldr	r3, [r3, #24]
 8000a08:	f003 0304 	and.w	r3, r3, #4
 8000a0c:	607b      	str	r3, [r7, #4]
 8000a0e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a10:	4b25      	ldr	r3, [pc, #148]	; (8000aa8 <MX_GPIO_Init+0xc4>)
 8000a12:	699b      	ldr	r3, [r3, #24]
 8000a14:	4a24      	ldr	r2, [pc, #144]	; (8000aa8 <MX_GPIO_Init+0xc4>)
 8000a16:	f043 0308 	orr.w	r3, r3, #8
 8000a1a:	6193      	str	r3, [r2, #24]
 8000a1c:	4b22      	ldr	r3, [pc, #136]	; (8000aa8 <MX_GPIO_Init+0xc4>)
 8000a1e:	699b      	ldr	r3, [r3, #24]
 8000a20:	f003 0308 	and.w	r3, r3, #8
 8000a24:	603b      	str	r3, [r7, #0]
 8000a26:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8000a28:	2200      	movs	r2, #0
 8000a2a:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8000a2e:	481f      	ldr	r0, [pc, #124]	; (8000aac <MX_GPIO_Init+0xc8>)
 8000a30:	f001 f8a8 	bl	8001b84 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000a34:	2200      	movs	r2, #0
 8000a36:	2102      	movs	r1, #2
 8000a38:	481d      	ldr	r0, [pc, #116]	; (8000ab0 <MX_GPIO_Init+0xcc>)
 8000a3a:	f001 f8a3 	bl	8001b84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a42:	4b1c      	ldr	r3, [pc, #112]	; (8000ab4 <MX_GPIO_Init+0xd0>)
 8000a44:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a4a:	f107 0308 	add.w	r3, r7, #8
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4816      	ldr	r0, [pc, #88]	; (8000aac <MX_GPIO_Init+0xc8>)
 8000a52:	f000 ff1b 	bl	800188c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4
                           PA5 PA6 PA7 PA8
                           PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8000a56:	f240 73fe 	movw	r3, #2046	; 0x7fe
 8000a5a:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a64:	2302      	movs	r3, #2
 8000a66:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a68:	f107 0308 	add.w	r3, r7, #8
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	480f      	ldr	r0, [pc, #60]	; (8000aac <MX_GPIO_Init+0xc8>)
 8000a70:	f000 ff0c 	bl	800188c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000a74:	2302      	movs	r3, #2
 8000a76:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a78:	2301      	movs	r3, #1
 8000a7a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a80:	2302      	movs	r3, #2
 8000a82:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a84:	f107 0308 	add.w	r3, r7, #8
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4809      	ldr	r0, [pc, #36]	; (8000ab0 <MX_GPIO_Init+0xcc>)
 8000a8c:	f000 fefe 	bl	800188c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000a90:	2200      	movs	r2, #0
 8000a92:	2100      	movs	r1, #0
 8000a94:	2006      	movs	r0, #6
 8000a96:	f000 fec2 	bl	800181e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000a9a:	2006      	movs	r0, #6
 8000a9c:	f000 fedb 	bl	8001856 <HAL_NVIC_EnableIRQ>

}
 8000aa0:	bf00      	nop
 8000aa2:	3718      	adds	r7, #24
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	40021000 	.word	0x40021000
 8000aac:	40010800 	.word	0x40010800
 8000ab0:	40010c00 	.word	0x40010c00
 8000ab4:	10110000 	.word	0x10110000

08000ab8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000abc:	bf00      	nop
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bc80      	pop	{r7}
 8000ac2:	4770      	bx	lr

08000ac4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b085      	sub	sp, #20
 8000ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000aca:	4b15      	ldr	r3, [pc, #84]	; (8000b20 <HAL_MspInit+0x5c>)
 8000acc:	699b      	ldr	r3, [r3, #24]
 8000ace:	4a14      	ldr	r2, [pc, #80]	; (8000b20 <HAL_MspInit+0x5c>)
 8000ad0:	f043 0301 	orr.w	r3, r3, #1
 8000ad4:	6193      	str	r3, [r2, #24]
 8000ad6:	4b12      	ldr	r3, [pc, #72]	; (8000b20 <HAL_MspInit+0x5c>)
 8000ad8:	699b      	ldr	r3, [r3, #24]
 8000ada:	f003 0301 	and.w	r3, r3, #1
 8000ade:	60bb      	str	r3, [r7, #8]
 8000ae0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ae2:	4b0f      	ldr	r3, [pc, #60]	; (8000b20 <HAL_MspInit+0x5c>)
 8000ae4:	69db      	ldr	r3, [r3, #28]
 8000ae6:	4a0e      	ldr	r2, [pc, #56]	; (8000b20 <HAL_MspInit+0x5c>)
 8000ae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aec:	61d3      	str	r3, [r2, #28]
 8000aee:	4b0c      	ldr	r3, [pc, #48]	; (8000b20 <HAL_MspInit+0x5c>)
 8000af0:	69db      	ldr	r3, [r3, #28]
 8000af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000af6:	607b      	str	r3, [r7, #4]
 8000af8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000afa:	4b0a      	ldr	r3, [pc, #40]	; (8000b24 <HAL_MspInit+0x60>)
 8000afc:	685b      	ldr	r3, [r3, #4]
 8000afe:	60fb      	str	r3, [r7, #12]
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000b06:	60fb      	str	r3, [r7, #12]
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000b0e:	60fb      	str	r3, [r7, #12]
 8000b10:	4a04      	ldr	r2, [pc, #16]	; (8000b24 <HAL_MspInit+0x60>)
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b16:	bf00      	nop
 8000b18:	3714      	adds	r7, #20
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bc80      	pop	{r7}
 8000b1e:	4770      	bx	lr
 8000b20:	40021000 	.word	0x40021000
 8000b24:	40010000 	.word	0x40010000

08000b28 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b088      	sub	sp, #32
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b30:	f107 0310 	add.w	r3, r7, #16
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
 8000b3c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4a14      	ldr	r2, [pc, #80]	; (8000b94 <HAL_ADC_MspInit+0x6c>)
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d121      	bne.n	8000b8c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b48:	4b13      	ldr	r3, [pc, #76]	; (8000b98 <HAL_ADC_MspInit+0x70>)
 8000b4a:	699b      	ldr	r3, [r3, #24]
 8000b4c:	4a12      	ldr	r2, [pc, #72]	; (8000b98 <HAL_ADC_MspInit+0x70>)
 8000b4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b52:	6193      	str	r3, [r2, #24]
 8000b54:	4b10      	ldr	r3, [pc, #64]	; (8000b98 <HAL_ADC_MspInit+0x70>)
 8000b56:	699b      	ldr	r3, [r3, #24]
 8000b58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b5c:	60fb      	str	r3, [r7, #12]
 8000b5e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b60:	4b0d      	ldr	r3, [pc, #52]	; (8000b98 <HAL_ADC_MspInit+0x70>)
 8000b62:	699b      	ldr	r3, [r3, #24]
 8000b64:	4a0c      	ldr	r2, [pc, #48]	; (8000b98 <HAL_ADC_MspInit+0x70>)
 8000b66:	f043 0308 	orr.w	r3, r3, #8
 8000b6a:	6193      	str	r3, [r2, #24]
 8000b6c:	4b0a      	ldr	r3, [pc, #40]	; (8000b98 <HAL_ADC_MspInit+0x70>)
 8000b6e:	699b      	ldr	r3, [r3, #24]
 8000b70:	f003 0308 	and.w	r3, r3, #8
 8000b74:	60bb      	str	r3, [r7, #8]
 8000b76:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b7c:	2303      	movs	r3, #3
 8000b7e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b80:	f107 0310 	add.w	r3, r7, #16
 8000b84:	4619      	mov	r1, r3
 8000b86:	4805      	ldr	r0, [pc, #20]	; (8000b9c <HAL_ADC_MspInit+0x74>)
 8000b88:	f000 fe80 	bl	800188c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b8c:	bf00      	nop
 8000b8e:	3720      	adds	r7, #32
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	40012400 	.word	0x40012400
 8000b98:	40021000 	.word	0x40021000
 8000b9c:	40010c00 	.word	0x40010c00

08000ba0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bc80      	pop	{r7}
 8000baa:	4770      	bx	lr

08000bac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bb0:	e7fe      	b.n	8000bb0 <HardFault_Handler+0x4>

08000bb2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bb6:	e7fe      	b.n	8000bb6 <MemManage_Handler+0x4>

08000bb8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bbc:	e7fe      	b.n	8000bbc <BusFault_Handler+0x4>

08000bbe <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bc2:	e7fe      	b.n	8000bc2 <UsageFault_Handler+0x4>

08000bc4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bc8:	bf00      	nop
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bc80      	pop	{r7}
 8000bce:	4770      	bx	lr

08000bd0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bd4:	bf00      	nop
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bc80      	pop	{r7}
 8000bda:	4770      	bx	lr

08000bdc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000be0:	bf00      	nop
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bc80      	pop	{r7}
 8000be6:	4770      	bx	lr

08000be8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bec:	f000 f8a8 	bl	8000d40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bf0:	bf00      	nop
 8000bf2:	bd80      	pop	{r7, pc}

08000bf4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000bf8:	2001      	movs	r0, #1
 8000bfa:	f000 ffdb 	bl	8001bb4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	bd80      	pop	{r7, pc}
	...

08000c04 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b084      	sub	sp, #16
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000c0c:	4b11      	ldr	r3, [pc, #68]	; (8000c54 <_sbrk+0x50>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d102      	bne.n	8000c1a <_sbrk+0x16>
		heap_end = &end;
 8000c14:	4b0f      	ldr	r3, [pc, #60]	; (8000c54 <_sbrk+0x50>)
 8000c16:	4a10      	ldr	r2, [pc, #64]	; (8000c58 <_sbrk+0x54>)
 8000c18:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000c1a:	4b0e      	ldr	r3, [pc, #56]	; (8000c54 <_sbrk+0x50>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000c20:	4b0c      	ldr	r3, [pc, #48]	; (8000c54 <_sbrk+0x50>)
 8000c22:	681a      	ldr	r2, [r3, #0]
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	4413      	add	r3, r2
 8000c28:	466a      	mov	r2, sp
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d907      	bls.n	8000c3e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000c2e:	f001 fd55 	bl	80026dc <__errno>
 8000c32:	4603      	mov	r3, r0
 8000c34:	220c      	movs	r2, #12
 8000c36:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8000c38:	f04f 33ff 	mov.w	r3, #4294967295
 8000c3c:	e006      	b.n	8000c4c <_sbrk+0x48>
	}

	heap_end += incr;
 8000c3e:	4b05      	ldr	r3, [pc, #20]	; (8000c54 <_sbrk+0x50>)
 8000c40:	681a      	ldr	r2, [r3, #0]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	4413      	add	r3, r2
 8000c46:	4a03      	ldr	r2, [pc, #12]	; (8000c54 <_sbrk+0x50>)
 8000c48:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000c4a:	68fb      	ldr	r3, [r7, #12]
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	3710      	adds	r7, #16
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	200000c4 	.word	0x200000c4
 8000c58:	200000e0 	.word	0x200000e0

08000c5c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c60:	bf00      	nop
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bc80      	pop	{r7}
 8000c66:	4770      	bx	lr

08000c68 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c68:	480c      	ldr	r0, [pc, #48]	; (8000c9c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c6a:	490d      	ldr	r1, [pc, #52]	; (8000ca0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c6c:	4a0d      	ldr	r2, [pc, #52]	; (8000ca4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c70:	e002      	b.n	8000c78 <LoopCopyDataInit>

08000c72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c76:	3304      	adds	r3, #4

08000c78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c7c:	d3f9      	bcc.n	8000c72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c7e:	4a0a      	ldr	r2, [pc, #40]	; (8000ca8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c80:	4c0a      	ldr	r4, [pc, #40]	; (8000cac <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c84:	e001      	b.n	8000c8a <LoopFillZerobss>

08000c86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c88:	3204      	adds	r2, #4

08000c8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c8c:	d3fb      	bcc.n	8000c86 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000c8e:	f7ff ffe5 	bl	8000c5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c92:	f001 fd29 	bl	80026e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c96:	f7ff fcf5 	bl	8000684 <main>
  bx lr
 8000c9a:	4770      	bx	lr
  ldr r0, =_sdata
 8000c9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ca0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000ca4:	080030d4 	.word	0x080030d4
  ldr r2, =_sbss
 8000ca8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000cac:	200000dc 	.word	0x200000dc

08000cb0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cb0:	e7fe      	b.n	8000cb0 <ADC1_2_IRQHandler>
	...

08000cb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cb8:	4b08      	ldr	r3, [pc, #32]	; (8000cdc <HAL_Init+0x28>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a07      	ldr	r2, [pc, #28]	; (8000cdc <HAL_Init+0x28>)
 8000cbe:	f043 0310 	orr.w	r3, r3, #16
 8000cc2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cc4:	2003      	movs	r0, #3
 8000cc6:	f000 fd9f 	bl	8001808 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cca:	2000      	movs	r0, #0
 8000ccc:	f000 f808 	bl	8000ce0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cd0:	f7ff fef8 	bl	8000ac4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cd4:	2300      	movs	r3, #0
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	40022000 	.word	0x40022000

08000ce0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ce8:	4b12      	ldr	r3, [pc, #72]	; (8000d34 <HAL_InitTick+0x54>)
 8000cea:	681a      	ldr	r2, [r3, #0]
 8000cec:	4b12      	ldr	r3, [pc, #72]	; (8000d38 <HAL_InitTick+0x58>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cf6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f000 fdb7 	bl	8001872 <HAL_SYSTICK_Config>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	e00e      	b.n	8000d2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	2b0f      	cmp	r3, #15
 8000d12:	d80a      	bhi.n	8000d2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d14:	2200      	movs	r2, #0
 8000d16:	6879      	ldr	r1, [r7, #4]
 8000d18:	f04f 30ff 	mov.w	r0, #4294967295
 8000d1c:	f000 fd7f 	bl	800181e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d20:	4a06      	ldr	r2, [pc, #24]	; (8000d3c <HAL_InitTick+0x5c>)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d26:	2300      	movs	r3, #0
 8000d28:	e000      	b.n	8000d2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d2a:	2301      	movs	r3, #1
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	3708      	adds	r7, #8
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	20000000 	.word	0x20000000
 8000d38:	20000008 	.word	0x20000008
 8000d3c:	20000004 	.word	0x20000004

08000d40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d44:	4b05      	ldr	r3, [pc, #20]	; (8000d5c <HAL_IncTick+0x1c>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	461a      	mov	r2, r3
 8000d4a:	4b05      	ldr	r3, [pc, #20]	; (8000d60 <HAL_IncTick+0x20>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4413      	add	r3, r2
 8000d50:	4a03      	ldr	r2, [pc, #12]	; (8000d60 <HAL_IncTick+0x20>)
 8000d52:	6013      	str	r3, [r2, #0]
}
 8000d54:	bf00      	nop
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bc80      	pop	{r7}
 8000d5a:	4770      	bx	lr
 8000d5c:	20000008 	.word	0x20000008
 8000d60:	200000c8 	.word	0x200000c8

08000d64 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  return uwTick;
 8000d68:	4b02      	ldr	r3, [pc, #8]	; (8000d74 <HAL_GetTick+0x10>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bc80      	pop	{r7}
 8000d72:	4770      	bx	lr
 8000d74:	200000c8 	.word	0x200000c8

08000d78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d80:	f7ff fff0 	bl	8000d64 <HAL_GetTick>
 8000d84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d90:	d005      	beq.n	8000d9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d92:	4b0a      	ldr	r3, [pc, #40]	; (8000dbc <HAL_Delay+0x44>)
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	461a      	mov	r2, r3
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	4413      	add	r3, r2
 8000d9c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d9e:	bf00      	nop
 8000da0:	f7ff ffe0 	bl	8000d64 <HAL_GetTick>
 8000da4:	4602      	mov	r2, r0
 8000da6:	68bb      	ldr	r3, [r7, #8]
 8000da8:	1ad3      	subs	r3, r2, r3
 8000daa:	68fa      	ldr	r2, [r7, #12]
 8000dac:	429a      	cmp	r2, r3
 8000dae:	d8f7      	bhi.n	8000da0 <HAL_Delay+0x28>
  {
  }
}
 8000db0:	bf00      	nop
 8000db2:	bf00      	nop
 8000db4:	3710      	adds	r7, #16
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	20000008 	.word	0x20000008

08000dc0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b086      	sub	sp, #24
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d101      	bne.n	8000de2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000dde:	2301      	movs	r3, #1
 8000de0:	e0be      	b.n	8000f60 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	689b      	ldr	r3, [r3, #8]
 8000de6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d109      	bne.n	8000e04 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	2200      	movs	r2, #0
 8000df4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	2200      	movs	r2, #0
 8000dfa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000dfe:	6878      	ldr	r0, [r7, #4]
 8000e00:	f7ff fe92 	bl	8000b28 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000e04:	6878      	ldr	r0, [r7, #4]
 8000e06:	f000 fbf1 	bl	80015ec <ADC_ConversionStop_Disable>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e12:	f003 0310 	and.w	r3, r3, #16
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	f040 8099 	bne.w	8000f4e <HAL_ADC_Init+0x18e>
 8000e1c:	7dfb      	ldrb	r3, [r7, #23]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	f040 8095 	bne.w	8000f4e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e28:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000e2c:	f023 0302 	bic.w	r3, r3, #2
 8000e30:	f043 0202 	orr.w	r2, r3, #2
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000e40:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	7b1b      	ldrb	r3, [r3, #12]
 8000e46:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000e48:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000e4a:	68ba      	ldr	r2, [r7, #8]
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	689b      	ldr	r3, [r3, #8]
 8000e54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e58:	d003      	beq.n	8000e62 <HAL_ADC_Init+0xa2>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	689b      	ldr	r3, [r3, #8]
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d102      	bne.n	8000e68 <HAL_ADC_Init+0xa8>
 8000e62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e66:	e000      	b.n	8000e6a <HAL_ADC_Init+0xaa>
 8000e68:	2300      	movs	r3, #0
 8000e6a:	693a      	ldr	r2, [r7, #16]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	7d1b      	ldrb	r3, [r3, #20]
 8000e74:	2b01      	cmp	r3, #1
 8000e76:	d119      	bne.n	8000eac <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	7b1b      	ldrb	r3, [r3, #12]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d109      	bne.n	8000e94 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	699b      	ldr	r3, [r3, #24]
 8000e84:	3b01      	subs	r3, #1
 8000e86:	035a      	lsls	r2, r3, #13
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e90:	613b      	str	r3, [r7, #16]
 8000e92:	e00b      	b.n	8000eac <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e98:	f043 0220 	orr.w	r2, r3, #32
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ea4:	f043 0201 	orr.w	r2, r3, #1
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	430a      	orrs	r2, r1
 8000ebe:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	689a      	ldr	r2, [r3, #8]
 8000ec6:	4b28      	ldr	r3, [pc, #160]	; (8000f68 <HAL_ADC_Init+0x1a8>)
 8000ec8:	4013      	ands	r3, r2
 8000eca:	687a      	ldr	r2, [r7, #4]
 8000ecc:	6812      	ldr	r2, [r2, #0]
 8000ece:	68b9      	ldr	r1, [r7, #8]
 8000ed0:	430b      	orrs	r3, r1
 8000ed2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	689b      	ldr	r3, [r3, #8]
 8000ed8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000edc:	d003      	beq.n	8000ee6 <HAL_ADC_Init+0x126>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	689b      	ldr	r3, [r3, #8]
 8000ee2:	2b01      	cmp	r3, #1
 8000ee4:	d104      	bne.n	8000ef0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	691b      	ldr	r3, [r3, #16]
 8000eea:	3b01      	subs	r3, #1
 8000eec:	051b      	lsls	r3, r3, #20
 8000eee:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ef6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	68fa      	ldr	r2, [r7, #12]
 8000f00:	430a      	orrs	r2, r1
 8000f02:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	689a      	ldr	r2, [r3, #8]
 8000f0a:	4b18      	ldr	r3, [pc, #96]	; (8000f6c <HAL_ADC_Init+0x1ac>)
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	68ba      	ldr	r2, [r7, #8]
 8000f10:	429a      	cmp	r2, r3
 8000f12:	d10b      	bne.n	8000f2c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2200      	movs	r2, #0
 8000f18:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f1e:	f023 0303 	bic.w	r3, r3, #3
 8000f22:	f043 0201 	orr.w	r2, r3, #1
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000f2a:	e018      	b.n	8000f5e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f30:	f023 0312 	bic.w	r3, r3, #18
 8000f34:	f043 0210 	orr.w	r2, r3, #16
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f40:	f043 0201 	orr.w	r2, r3, #1
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000f4c:	e007      	b.n	8000f5e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f52:	f043 0210 	orr.w	r2, r3, #16
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000f5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	3718      	adds	r7, #24
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	ffe1f7fd 	.word	0xffe1f7fd
 8000f6c:	ff1f0efe 	.word	0xff1f0efe

08000f70 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d101      	bne.n	8000f8a <HAL_ADC_Start+0x1a>
 8000f86:	2302      	movs	r3, #2
 8000f88:	e098      	b.n	80010bc <HAL_ADC_Start+0x14c>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	f000 fad0 	bl	8001538 <ADC_Enable>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000f9c:	7bfb      	ldrb	r3, [r7, #15]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	f040 8087 	bne.w	80010b2 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fa8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000fac:	f023 0301 	bic.w	r3, r3, #1
 8000fb0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a41      	ldr	r2, [pc, #260]	; (80010c4 <HAL_ADC_Start+0x154>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d105      	bne.n	8000fce <HAL_ADC_Start+0x5e>
 8000fc2:	4b41      	ldr	r3, [pc, #260]	; (80010c8 <HAL_ADC_Start+0x158>)
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d115      	bne.n	8000ffa <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fd2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d026      	beq.n	8001036 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fec:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000ff0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000ff8:	e01d      	b.n	8001036 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ffe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a2f      	ldr	r2, [pc, #188]	; (80010c8 <HAL_ADC_Start+0x158>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d004      	beq.n	800101a <HAL_ADC_Start+0xaa>
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a2b      	ldr	r2, [pc, #172]	; (80010c4 <HAL_ADC_Start+0x154>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d10d      	bne.n	8001036 <HAL_ADC_Start+0xc6>
 800101a:	4b2b      	ldr	r3, [pc, #172]	; (80010c8 <HAL_ADC_Start+0x158>)
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001022:	2b00      	cmp	r3, #0
 8001024:	d007      	beq.n	8001036 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800102a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800102e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800103a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800103e:	2b00      	cmp	r3, #0
 8001040:	d006      	beq.n	8001050 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001046:	f023 0206 	bic.w	r2, r3, #6
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	62da      	str	r2, [r3, #44]	; 0x2c
 800104e:	e002      	b.n	8001056 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2200      	movs	r2, #0
 8001054:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2200      	movs	r2, #0
 800105a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f06f 0202 	mvn.w	r2, #2
 8001066:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	689b      	ldr	r3, [r3, #8]
 800106e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001072:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001076:	d113      	bne.n	80010a0 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800107c:	4a11      	ldr	r2, [pc, #68]	; (80010c4 <HAL_ADC_Start+0x154>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d105      	bne.n	800108e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001082:	4b11      	ldr	r3, [pc, #68]	; (80010c8 <HAL_ADC_Start+0x158>)
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800108a:	2b00      	cmp	r3, #0
 800108c:	d108      	bne.n	80010a0 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	689a      	ldr	r2, [r3, #8]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800109c:	609a      	str	r2, [r3, #8]
 800109e:	e00c      	b.n	80010ba <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	689a      	ldr	r2, [r3, #8]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	e003      	b.n	80010ba <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2200      	movs	r2, #0
 80010b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80010ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3710      	adds	r7, #16
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	40012800 	.word	0x40012800
 80010c8:	40012400 	.word	0x40012400

080010cc <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010d4:	2300      	movs	r3, #0
 80010d6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d101      	bne.n	80010e6 <HAL_ADC_Stop+0x1a>
 80010e2:	2302      	movs	r3, #2
 80010e4:	e01a      	b.n	800111c <HAL_ADC_Stop+0x50>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2201      	movs	r2, #1
 80010ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	f000 fa7c 	bl	80015ec <ADC_ConversionStop_Disable>
 80010f4:	4603      	mov	r3, r0
 80010f6:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80010f8:	7bfb      	ldrb	r3, [r7, #15]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d109      	bne.n	8001112 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001102:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001106:	f023 0301 	bic.w	r3, r3, #1
 800110a:	f043 0201 	orr.w	r2, r3, #1
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2200      	movs	r2, #0
 8001116:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800111a:	7bfb      	ldrb	r3, [r7, #15]
}
 800111c:	4618      	mov	r0, r3
 800111e:	3710      	adds	r7, #16
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}

08001124 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001124:	b590      	push	{r4, r7, lr}
 8001126:	b087      	sub	sp, #28
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800112e:	2300      	movs	r3, #0
 8001130:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001132:	2300      	movs	r3, #0
 8001134:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001136:	2300      	movs	r3, #0
 8001138:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800113a:	f7ff fe13 	bl	8000d64 <HAL_GetTick>
 800113e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	689b      	ldr	r3, [r3, #8]
 8001146:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800114a:	2b00      	cmp	r3, #0
 800114c:	d00b      	beq.n	8001166 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001152:	f043 0220 	orr.w	r2, r3, #32
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2200      	movs	r2, #0
 800115e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	e0d3      	b.n	800130e <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001170:	2b00      	cmp	r3, #0
 8001172:	d131      	bne.n	80011d8 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800117a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800117e:	2b00      	cmp	r3, #0
 8001180:	d12a      	bne.n	80011d8 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001182:	e021      	b.n	80011c8 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800118a:	d01d      	beq.n	80011c8 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d007      	beq.n	80011a2 <HAL_ADC_PollForConversion+0x7e>
 8001192:	f7ff fde7 	bl	8000d64 <HAL_GetTick>
 8001196:	4602      	mov	r2, r0
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	1ad3      	subs	r3, r2, r3
 800119c:	683a      	ldr	r2, [r7, #0]
 800119e:	429a      	cmp	r2, r3
 80011a0:	d212      	bcs.n	80011c8 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f003 0302 	and.w	r3, r3, #2
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d10b      	bne.n	80011c8 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011b4:	f043 0204 	orr.w	r2, r3, #4
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2200      	movs	r2, #0
 80011c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 80011c4:	2303      	movs	r3, #3
 80011c6:	e0a2      	b.n	800130e <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f003 0302 	and.w	r3, r3, #2
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d0d6      	beq.n	8001184 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80011d6:	e070      	b.n	80012ba <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80011d8:	4b4f      	ldr	r3, [pc, #316]	; (8001318 <HAL_ADC_PollForConversion+0x1f4>)
 80011da:	681c      	ldr	r4, [r3, #0]
 80011dc:	2002      	movs	r0, #2
 80011de:	f001 f9bd 	bl	800255c <HAL_RCCEx_GetPeriphCLKFreq>
 80011e2:	4603      	mov	r3, r0
 80011e4:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	6919      	ldr	r1, [r3, #16]
 80011ee:	4b4b      	ldr	r3, [pc, #300]	; (800131c <HAL_ADC_PollForConversion+0x1f8>)
 80011f0:	400b      	ands	r3, r1
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d118      	bne.n	8001228 <HAL_ADC_PollForConversion+0x104>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	68d9      	ldr	r1, [r3, #12]
 80011fc:	4b48      	ldr	r3, [pc, #288]	; (8001320 <HAL_ADC_PollForConversion+0x1fc>)
 80011fe:	400b      	ands	r3, r1
 8001200:	2b00      	cmp	r3, #0
 8001202:	d111      	bne.n	8001228 <HAL_ADC_PollForConversion+0x104>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	6919      	ldr	r1, [r3, #16]
 800120a:	4b46      	ldr	r3, [pc, #280]	; (8001324 <HAL_ADC_PollForConversion+0x200>)
 800120c:	400b      	ands	r3, r1
 800120e:	2b00      	cmp	r3, #0
 8001210:	d108      	bne.n	8001224 <HAL_ADC_PollForConversion+0x100>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	68d9      	ldr	r1, [r3, #12]
 8001218:	4b43      	ldr	r3, [pc, #268]	; (8001328 <HAL_ADC_PollForConversion+0x204>)
 800121a:	400b      	ands	r3, r1
 800121c:	2b00      	cmp	r3, #0
 800121e:	d101      	bne.n	8001224 <HAL_ADC_PollForConversion+0x100>
 8001220:	2314      	movs	r3, #20
 8001222:	e020      	b.n	8001266 <HAL_ADC_PollForConversion+0x142>
 8001224:	2329      	movs	r3, #41	; 0x29
 8001226:	e01e      	b.n	8001266 <HAL_ADC_PollForConversion+0x142>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	6919      	ldr	r1, [r3, #16]
 800122e:	4b3d      	ldr	r3, [pc, #244]	; (8001324 <HAL_ADC_PollForConversion+0x200>)
 8001230:	400b      	ands	r3, r1
 8001232:	2b00      	cmp	r3, #0
 8001234:	d106      	bne.n	8001244 <HAL_ADC_PollForConversion+0x120>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	68d9      	ldr	r1, [r3, #12]
 800123c:	4b3a      	ldr	r3, [pc, #232]	; (8001328 <HAL_ADC_PollForConversion+0x204>)
 800123e:	400b      	ands	r3, r1
 8001240:	2b00      	cmp	r3, #0
 8001242:	d00d      	beq.n	8001260 <HAL_ADC_PollForConversion+0x13c>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	6919      	ldr	r1, [r3, #16]
 800124a:	4b38      	ldr	r3, [pc, #224]	; (800132c <HAL_ADC_PollForConversion+0x208>)
 800124c:	400b      	ands	r3, r1
 800124e:	2b00      	cmp	r3, #0
 8001250:	d108      	bne.n	8001264 <HAL_ADC_PollForConversion+0x140>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	68d9      	ldr	r1, [r3, #12]
 8001258:	4b34      	ldr	r3, [pc, #208]	; (800132c <HAL_ADC_PollForConversion+0x208>)
 800125a:	400b      	ands	r3, r1
 800125c:	2b00      	cmp	r3, #0
 800125e:	d101      	bne.n	8001264 <HAL_ADC_PollForConversion+0x140>
 8001260:	2354      	movs	r3, #84	; 0x54
 8001262:	e000      	b.n	8001266 <HAL_ADC_PollForConversion+0x142>
 8001264:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001266:	fb02 f303 	mul.w	r3, r2, r3
 800126a:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800126c:	e021      	b.n	80012b2 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001274:	d01a      	beq.n	80012ac <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d007      	beq.n	800128c <HAL_ADC_PollForConversion+0x168>
 800127c:	f7ff fd72 	bl	8000d64 <HAL_GetTick>
 8001280:	4602      	mov	r2, r0
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	683a      	ldr	r2, [r7, #0]
 8001288:	429a      	cmp	r2, r3
 800128a:	d20f      	bcs.n	80012ac <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	693a      	ldr	r2, [r7, #16]
 8001290:	429a      	cmp	r2, r3
 8001292:	d90b      	bls.n	80012ac <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001298:	f043 0204 	orr.w	r2, r3, #4
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2200      	movs	r2, #0
 80012a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 80012a8:	2303      	movs	r3, #3
 80012aa:	e030      	b.n	800130e <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	3301      	adds	r3, #1
 80012b0:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	693a      	ldr	r2, [r7, #16]
 80012b6:	429a      	cmp	r2, r3
 80012b8:	d8d9      	bhi.n	800126e <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f06f 0212 	mvn.w	r2, #18
 80012c2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012c8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80012da:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80012de:	d115      	bne.n	800130c <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d111      	bne.n	800130c <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d105      	bne.n	800130c <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001304:	f043 0201 	orr.w	r2, r3, #1
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800130c:	2300      	movs	r3, #0
}
 800130e:	4618      	mov	r0, r3
 8001310:	371c      	adds	r7, #28
 8001312:	46bd      	mov	sp, r7
 8001314:	bd90      	pop	{r4, r7, pc}
 8001316:	bf00      	nop
 8001318:	20000000 	.word	0x20000000
 800131c:	24924924 	.word	0x24924924
 8001320:	00924924 	.word	0x00924924
 8001324:	12492492 	.word	0x12492492
 8001328:	00492492 	.word	0x00492492
 800132c:	00249249 	.word	0x00249249

08001330 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800133e:	4618      	mov	r0, r3
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	bc80      	pop	{r7}
 8001346:	4770      	bx	lr

08001348 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001348:	b480      	push	{r7}
 800134a:	b085      	sub	sp, #20
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001352:	2300      	movs	r3, #0
 8001354:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001356:	2300      	movs	r3, #0
 8001358:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001360:	2b01      	cmp	r3, #1
 8001362:	d101      	bne.n	8001368 <HAL_ADC_ConfigChannel+0x20>
 8001364:	2302      	movs	r3, #2
 8001366:	e0dc      	b.n	8001522 <HAL_ADC_ConfigChannel+0x1da>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2201      	movs	r2, #1
 800136c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	2b06      	cmp	r3, #6
 8001376:	d81c      	bhi.n	80013b2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	685a      	ldr	r2, [r3, #4]
 8001382:	4613      	mov	r3, r2
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	4413      	add	r3, r2
 8001388:	3b05      	subs	r3, #5
 800138a:	221f      	movs	r2, #31
 800138c:	fa02 f303 	lsl.w	r3, r2, r3
 8001390:	43db      	mvns	r3, r3
 8001392:	4019      	ands	r1, r3
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	6818      	ldr	r0, [r3, #0]
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685a      	ldr	r2, [r3, #4]
 800139c:	4613      	mov	r3, r2
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	4413      	add	r3, r2
 80013a2:	3b05      	subs	r3, #5
 80013a4:	fa00 f203 	lsl.w	r2, r0, r3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	430a      	orrs	r2, r1
 80013ae:	635a      	str	r2, [r3, #52]	; 0x34
 80013b0:	e03c      	b.n	800142c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	2b0c      	cmp	r3, #12
 80013b8:	d81c      	bhi.n	80013f4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685a      	ldr	r2, [r3, #4]
 80013c4:	4613      	mov	r3, r2
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	4413      	add	r3, r2
 80013ca:	3b23      	subs	r3, #35	; 0x23
 80013cc:	221f      	movs	r2, #31
 80013ce:	fa02 f303 	lsl.w	r3, r2, r3
 80013d2:	43db      	mvns	r3, r3
 80013d4:	4019      	ands	r1, r3
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	6818      	ldr	r0, [r3, #0]
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	685a      	ldr	r2, [r3, #4]
 80013de:	4613      	mov	r3, r2
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	4413      	add	r3, r2
 80013e4:	3b23      	subs	r3, #35	; 0x23
 80013e6:	fa00 f203 	lsl.w	r2, r0, r3
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	430a      	orrs	r2, r1
 80013f0:	631a      	str	r2, [r3, #48]	; 0x30
 80013f2:	e01b      	b.n	800142c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	685a      	ldr	r2, [r3, #4]
 80013fe:	4613      	mov	r3, r2
 8001400:	009b      	lsls	r3, r3, #2
 8001402:	4413      	add	r3, r2
 8001404:	3b41      	subs	r3, #65	; 0x41
 8001406:	221f      	movs	r2, #31
 8001408:	fa02 f303 	lsl.w	r3, r2, r3
 800140c:	43db      	mvns	r3, r3
 800140e:	4019      	ands	r1, r3
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	6818      	ldr	r0, [r3, #0]
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685a      	ldr	r2, [r3, #4]
 8001418:	4613      	mov	r3, r2
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	4413      	add	r3, r2
 800141e:	3b41      	subs	r3, #65	; 0x41
 8001420:	fa00 f203 	lsl.w	r2, r0, r3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	430a      	orrs	r2, r1
 800142a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	2b09      	cmp	r3, #9
 8001432:	d91c      	bls.n	800146e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	68d9      	ldr	r1, [r3, #12]
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	4613      	mov	r3, r2
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	4413      	add	r3, r2
 8001444:	3b1e      	subs	r3, #30
 8001446:	2207      	movs	r2, #7
 8001448:	fa02 f303 	lsl.w	r3, r2, r3
 800144c:	43db      	mvns	r3, r3
 800144e:	4019      	ands	r1, r3
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	6898      	ldr	r0, [r3, #8]
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	4613      	mov	r3, r2
 800145a:	005b      	lsls	r3, r3, #1
 800145c:	4413      	add	r3, r2
 800145e:	3b1e      	subs	r3, #30
 8001460:	fa00 f203 	lsl.w	r2, r0, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	430a      	orrs	r2, r1
 800146a:	60da      	str	r2, [r3, #12]
 800146c:	e019      	b.n	80014a2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	6919      	ldr	r1, [r3, #16]
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	4613      	mov	r3, r2
 800147a:	005b      	lsls	r3, r3, #1
 800147c:	4413      	add	r3, r2
 800147e:	2207      	movs	r2, #7
 8001480:	fa02 f303 	lsl.w	r3, r2, r3
 8001484:	43db      	mvns	r3, r3
 8001486:	4019      	ands	r1, r3
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	6898      	ldr	r0, [r3, #8]
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	4613      	mov	r3, r2
 8001492:	005b      	lsls	r3, r3, #1
 8001494:	4413      	add	r3, r2
 8001496:	fa00 f203 	lsl.w	r2, r0, r3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	430a      	orrs	r2, r1
 80014a0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	2b10      	cmp	r3, #16
 80014a8:	d003      	beq.n	80014b2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80014ae:	2b11      	cmp	r3, #17
 80014b0:	d132      	bne.n	8001518 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a1d      	ldr	r2, [pc, #116]	; (800152c <HAL_ADC_ConfigChannel+0x1e4>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d125      	bne.n	8001508 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d126      	bne.n	8001518 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	689a      	ldr	r2, [r3, #8]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80014d8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	2b10      	cmp	r3, #16
 80014e0:	d11a      	bne.n	8001518 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80014e2:	4b13      	ldr	r3, [pc, #76]	; (8001530 <HAL_ADC_ConfigChannel+0x1e8>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a13      	ldr	r2, [pc, #76]	; (8001534 <HAL_ADC_ConfigChannel+0x1ec>)
 80014e8:	fba2 2303 	umull	r2, r3, r2, r3
 80014ec:	0c9a      	lsrs	r2, r3, #18
 80014ee:	4613      	mov	r3, r2
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	4413      	add	r3, r2
 80014f4:	005b      	lsls	r3, r3, #1
 80014f6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80014f8:	e002      	b.n	8001500 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80014fa:	68bb      	ldr	r3, [r7, #8]
 80014fc:	3b01      	subs	r3, #1
 80014fe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d1f9      	bne.n	80014fa <HAL_ADC_ConfigChannel+0x1b2>
 8001506:	e007      	b.n	8001518 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800150c:	f043 0220 	orr.w	r2, r3, #32
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2200      	movs	r2, #0
 800151c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001520:	7bfb      	ldrb	r3, [r7, #15]
}
 8001522:	4618      	mov	r0, r3
 8001524:	3714      	adds	r7, #20
 8001526:	46bd      	mov	sp, r7
 8001528:	bc80      	pop	{r7}
 800152a:	4770      	bx	lr
 800152c:	40012400 	.word	0x40012400
 8001530:	20000000 	.word	0x20000000
 8001534:	431bde83 	.word	0x431bde83

08001538 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001540:	2300      	movs	r3, #0
 8001542:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001544:	2300      	movs	r3, #0
 8001546:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	f003 0301 	and.w	r3, r3, #1
 8001552:	2b01      	cmp	r3, #1
 8001554:	d040      	beq.n	80015d8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	689a      	ldr	r2, [r3, #8]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f042 0201 	orr.w	r2, r2, #1
 8001564:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001566:	4b1f      	ldr	r3, [pc, #124]	; (80015e4 <ADC_Enable+0xac>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a1f      	ldr	r2, [pc, #124]	; (80015e8 <ADC_Enable+0xb0>)
 800156c:	fba2 2303 	umull	r2, r3, r2, r3
 8001570:	0c9b      	lsrs	r3, r3, #18
 8001572:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001574:	e002      	b.n	800157c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	3b01      	subs	r3, #1
 800157a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d1f9      	bne.n	8001576 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001582:	f7ff fbef 	bl	8000d64 <HAL_GetTick>
 8001586:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001588:	e01f      	b.n	80015ca <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800158a:	f7ff fbeb 	bl	8000d64 <HAL_GetTick>
 800158e:	4602      	mov	r2, r0
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	2b02      	cmp	r3, #2
 8001596:	d918      	bls.n	80015ca <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	f003 0301 	and.w	r3, r3, #1
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d011      	beq.n	80015ca <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015aa:	f043 0210 	orr.w	r2, r3, #16
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015b6:	f043 0201 	orr.w	r2, r3, #1
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2200      	movs	r2, #0
 80015c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e007      	b.n	80015da <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	f003 0301 	and.w	r3, r3, #1
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d1d8      	bne.n	800158a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80015d8:	2300      	movs	r3, #0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3710      	adds	r7, #16
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	20000000 	.word	0x20000000
 80015e8:	431bde83 	.word	0x431bde83

080015ec <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80015f4:	2300      	movs	r3, #0
 80015f6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	f003 0301 	and.w	r3, r3, #1
 8001602:	2b01      	cmp	r3, #1
 8001604:	d12e      	bne.n	8001664 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	689a      	ldr	r2, [r3, #8]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f022 0201 	bic.w	r2, r2, #1
 8001614:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001616:	f7ff fba5 	bl	8000d64 <HAL_GetTick>
 800161a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800161c:	e01b      	b.n	8001656 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800161e:	f7ff fba1 	bl	8000d64 <HAL_GetTick>
 8001622:	4602      	mov	r2, r0
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	2b02      	cmp	r3, #2
 800162a:	d914      	bls.n	8001656 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	f003 0301 	and.w	r3, r3, #1
 8001636:	2b01      	cmp	r3, #1
 8001638:	d10d      	bne.n	8001656 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800163e:	f043 0210 	orr.w	r2, r3, #16
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800164a:	f043 0201 	orr.w	r2, r3, #1
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e007      	b.n	8001666 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	f003 0301 	and.w	r3, r3, #1
 8001660:	2b01      	cmp	r3, #1
 8001662:	d0dc      	beq.n	800161e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001664:	2300      	movs	r3, #0
}
 8001666:	4618      	mov	r0, r3
 8001668:	3710      	adds	r7, #16
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
	...

08001670 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001670:	b480      	push	{r7}
 8001672:	b085      	sub	sp, #20
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	f003 0307 	and.w	r3, r3, #7
 800167e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001680:	4b0c      	ldr	r3, [pc, #48]	; (80016b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001686:	68ba      	ldr	r2, [r7, #8]
 8001688:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800168c:	4013      	ands	r3, r2
 800168e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001698:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800169c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016a2:	4a04      	ldr	r2, [pc, #16]	; (80016b4 <__NVIC_SetPriorityGrouping+0x44>)
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	60d3      	str	r3, [r2, #12]
}
 80016a8:	bf00      	nop
 80016aa:	3714      	adds	r7, #20
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bc80      	pop	{r7}
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	e000ed00 	.word	0xe000ed00

080016b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016bc:	4b04      	ldr	r3, [pc, #16]	; (80016d0 <__NVIC_GetPriorityGrouping+0x18>)
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	0a1b      	lsrs	r3, r3, #8
 80016c2:	f003 0307 	and.w	r3, r3, #7
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bc80      	pop	{r7}
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	e000ed00 	.word	0xe000ed00

080016d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	4603      	mov	r3, r0
 80016dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	db0b      	blt.n	80016fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016e6:	79fb      	ldrb	r3, [r7, #7]
 80016e8:	f003 021f 	and.w	r2, r3, #31
 80016ec:	4906      	ldr	r1, [pc, #24]	; (8001708 <__NVIC_EnableIRQ+0x34>)
 80016ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f2:	095b      	lsrs	r3, r3, #5
 80016f4:	2001      	movs	r0, #1
 80016f6:	fa00 f202 	lsl.w	r2, r0, r2
 80016fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016fe:	bf00      	nop
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	bc80      	pop	{r7}
 8001706:	4770      	bx	lr
 8001708:	e000e100 	.word	0xe000e100

0800170c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	4603      	mov	r3, r0
 8001714:	6039      	str	r1, [r7, #0]
 8001716:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001718:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800171c:	2b00      	cmp	r3, #0
 800171e:	db0a      	blt.n	8001736 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	b2da      	uxtb	r2, r3
 8001724:	490c      	ldr	r1, [pc, #48]	; (8001758 <__NVIC_SetPriority+0x4c>)
 8001726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800172a:	0112      	lsls	r2, r2, #4
 800172c:	b2d2      	uxtb	r2, r2
 800172e:	440b      	add	r3, r1
 8001730:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001734:	e00a      	b.n	800174c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	b2da      	uxtb	r2, r3
 800173a:	4908      	ldr	r1, [pc, #32]	; (800175c <__NVIC_SetPriority+0x50>)
 800173c:	79fb      	ldrb	r3, [r7, #7]
 800173e:	f003 030f 	and.w	r3, r3, #15
 8001742:	3b04      	subs	r3, #4
 8001744:	0112      	lsls	r2, r2, #4
 8001746:	b2d2      	uxtb	r2, r2
 8001748:	440b      	add	r3, r1
 800174a:	761a      	strb	r2, [r3, #24]
}
 800174c:	bf00      	nop
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	bc80      	pop	{r7}
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	e000e100 	.word	0xe000e100
 800175c:	e000ed00 	.word	0xe000ed00

08001760 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001760:	b480      	push	{r7}
 8001762:	b089      	sub	sp, #36	; 0x24
 8001764:	af00      	add	r7, sp, #0
 8001766:	60f8      	str	r0, [r7, #12]
 8001768:	60b9      	str	r1, [r7, #8]
 800176a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	f003 0307 	and.w	r3, r3, #7
 8001772:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	f1c3 0307 	rsb	r3, r3, #7
 800177a:	2b04      	cmp	r3, #4
 800177c:	bf28      	it	cs
 800177e:	2304      	movcs	r3, #4
 8001780:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	3304      	adds	r3, #4
 8001786:	2b06      	cmp	r3, #6
 8001788:	d902      	bls.n	8001790 <NVIC_EncodePriority+0x30>
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	3b03      	subs	r3, #3
 800178e:	e000      	b.n	8001792 <NVIC_EncodePriority+0x32>
 8001790:	2300      	movs	r3, #0
 8001792:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001794:	f04f 32ff 	mov.w	r2, #4294967295
 8001798:	69bb      	ldr	r3, [r7, #24]
 800179a:	fa02 f303 	lsl.w	r3, r2, r3
 800179e:	43da      	mvns	r2, r3
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	401a      	ands	r2, r3
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017a8:	f04f 31ff 	mov.w	r1, #4294967295
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	fa01 f303 	lsl.w	r3, r1, r3
 80017b2:	43d9      	mvns	r1, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b8:	4313      	orrs	r3, r2
         );
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3724      	adds	r7, #36	; 0x24
 80017be:	46bd      	mov	sp, r7
 80017c0:	bc80      	pop	{r7}
 80017c2:	4770      	bx	lr

080017c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	3b01      	subs	r3, #1
 80017d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017d4:	d301      	bcc.n	80017da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017d6:	2301      	movs	r3, #1
 80017d8:	e00f      	b.n	80017fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017da:	4a0a      	ldr	r2, [pc, #40]	; (8001804 <SysTick_Config+0x40>)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	3b01      	subs	r3, #1
 80017e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017e2:	210f      	movs	r1, #15
 80017e4:	f04f 30ff 	mov.w	r0, #4294967295
 80017e8:	f7ff ff90 	bl	800170c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017ec:	4b05      	ldr	r3, [pc, #20]	; (8001804 <SysTick_Config+0x40>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017f2:	4b04      	ldr	r3, [pc, #16]	; (8001804 <SysTick_Config+0x40>)
 80017f4:	2207      	movs	r2, #7
 80017f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017f8:	2300      	movs	r3, #0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	e000e010 	.word	0xe000e010

08001808 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	f7ff ff2d 	bl	8001670 <__NVIC_SetPriorityGrouping>
}
 8001816:	bf00      	nop
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}

0800181e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800181e:	b580      	push	{r7, lr}
 8001820:	b086      	sub	sp, #24
 8001822:	af00      	add	r7, sp, #0
 8001824:	4603      	mov	r3, r0
 8001826:	60b9      	str	r1, [r7, #8]
 8001828:	607a      	str	r2, [r7, #4]
 800182a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800182c:	2300      	movs	r3, #0
 800182e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001830:	f7ff ff42 	bl	80016b8 <__NVIC_GetPriorityGrouping>
 8001834:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	68b9      	ldr	r1, [r7, #8]
 800183a:	6978      	ldr	r0, [r7, #20]
 800183c:	f7ff ff90 	bl	8001760 <NVIC_EncodePriority>
 8001840:	4602      	mov	r2, r0
 8001842:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001846:	4611      	mov	r1, r2
 8001848:	4618      	mov	r0, r3
 800184a:	f7ff ff5f 	bl	800170c <__NVIC_SetPriority>
}
 800184e:	bf00      	nop
 8001850:	3718      	adds	r7, #24
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001856:	b580      	push	{r7, lr}
 8001858:	b082      	sub	sp, #8
 800185a:	af00      	add	r7, sp, #0
 800185c:	4603      	mov	r3, r0
 800185e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001860:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001864:	4618      	mov	r0, r3
 8001866:	f7ff ff35 	bl	80016d4 <__NVIC_EnableIRQ>
}
 800186a:	bf00      	nop
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}

08001872 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001872:	b580      	push	{r7, lr}
 8001874:	b082      	sub	sp, #8
 8001876:	af00      	add	r7, sp, #0
 8001878:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f7ff ffa2 	bl	80017c4 <SysTick_Config>
 8001880:	4603      	mov	r3, r0
}
 8001882:	4618      	mov	r0, r3
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
	...

0800188c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800188c:	b480      	push	{r7}
 800188e:	b08b      	sub	sp, #44	; 0x2c
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001896:	2300      	movs	r3, #0
 8001898:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800189a:	2300      	movs	r3, #0
 800189c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800189e:	e161      	b.n	8001b64 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80018a0:	2201      	movs	r2, #1
 80018a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a4:	fa02 f303 	lsl.w	r3, r2, r3
 80018a8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	69fa      	ldr	r2, [r7, #28]
 80018b0:	4013      	ands	r3, r2
 80018b2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80018b4:	69ba      	ldr	r2, [r7, #24]
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	f040 8150 	bne.w	8001b5e <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	4a97      	ldr	r2, [pc, #604]	; (8001b20 <HAL_GPIO_Init+0x294>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d05e      	beq.n	8001986 <HAL_GPIO_Init+0xfa>
 80018c8:	4a95      	ldr	r2, [pc, #596]	; (8001b20 <HAL_GPIO_Init+0x294>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d875      	bhi.n	80019ba <HAL_GPIO_Init+0x12e>
 80018ce:	4a95      	ldr	r2, [pc, #596]	; (8001b24 <HAL_GPIO_Init+0x298>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d058      	beq.n	8001986 <HAL_GPIO_Init+0xfa>
 80018d4:	4a93      	ldr	r2, [pc, #588]	; (8001b24 <HAL_GPIO_Init+0x298>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d86f      	bhi.n	80019ba <HAL_GPIO_Init+0x12e>
 80018da:	4a93      	ldr	r2, [pc, #588]	; (8001b28 <HAL_GPIO_Init+0x29c>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d052      	beq.n	8001986 <HAL_GPIO_Init+0xfa>
 80018e0:	4a91      	ldr	r2, [pc, #580]	; (8001b28 <HAL_GPIO_Init+0x29c>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d869      	bhi.n	80019ba <HAL_GPIO_Init+0x12e>
 80018e6:	4a91      	ldr	r2, [pc, #580]	; (8001b2c <HAL_GPIO_Init+0x2a0>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d04c      	beq.n	8001986 <HAL_GPIO_Init+0xfa>
 80018ec:	4a8f      	ldr	r2, [pc, #572]	; (8001b2c <HAL_GPIO_Init+0x2a0>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d863      	bhi.n	80019ba <HAL_GPIO_Init+0x12e>
 80018f2:	4a8f      	ldr	r2, [pc, #572]	; (8001b30 <HAL_GPIO_Init+0x2a4>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d046      	beq.n	8001986 <HAL_GPIO_Init+0xfa>
 80018f8:	4a8d      	ldr	r2, [pc, #564]	; (8001b30 <HAL_GPIO_Init+0x2a4>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d85d      	bhi.n	80019ba <HAL_GPIO_Init+0x12e>
 80018fe:	2b12      	cmp	r3, #18
 8001900:	d82a      	bhi.n	8001958 <HAL_GPIO_Init+0xcc>
 8001902:	2b12      	cmp	r3, #18
 8001904:	d859      	bhi.n	80019ba <HAL_GPIO_Init+0x12e>
 8001906:	a201      	add	r2, pc, #4	; (adr r2, 800190c <HAL_GPIO_Init+0x80>)
 8001908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800190c:	08001987 	.word	0x08001987
 8001910:	08001961 	.word	0x08001961
 8001914:	08001973 	.word	0x08001973
 8001918:	080019b5 	.word	0x080019b5
 800191c:	080019bb 	.word	0x080019bb
 8001920:	080019bb 	.word	0x080019bb
 8001924:	080019bb 	.word	0x080019bb
 8001928:	080019bb 	.word	0x080019bb
 800192c:	080019bb 	.word	0x080019bb
 8001930:	080019bb 	.word	0x080019bb
 8001934:	080019bb 	.word	0x080019bb
 8001938:	080019bb 	.word	0x080019bb
 800193c:	080019bb 	.word	0x080019bb
 8001940:	080019bb 	.word	0x080019bb
 8001944:	080019bb 	.word	0x080019bb
 8001948:	080019bb 	.word	0x080019bb
 800194c:	080019bb 	.word	0x080019bb
 8001950:	08001969 	.word	0x08001969
 8001954:	0800197d 	.word	0x0800197d
 8001958:	4a76      	ldr	r2, [pc, #472]	; (8001b34 <HAL_GPIO_Init+0x2a8>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d013      	beq.n	8001986 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800195e:	e02c      	b.n	80019ba <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	623b      	str	r3, [r7, #32]
          break;
 8001966:	e029      	b.n	80019bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	3304      	adds	r3, #4
 800196e:	623b      	str	r3, [r7, #32]
          break;
 8001970:	e024      	b.n	80019bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	68db      	ldr	r3, [r3, #12]
 8001976:	3308      	adds	r3, #8
 8001978:	623b      	str	r3, [r7, #32]
          break;
 800197a:	e01f      	b.n	80019bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	330c      	adds	r3, #12
 8001982:	623b      	str	r3, [r7, #32]
          break;
 8001984:	e01a      	b.n	80019bc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d102      	bne.n	8001994 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800198e:	2304      	movs	r3, #4
 8001990:	623b      	str	r3, [r7, #32]
          break;
 8001992:	e013      	b.n	80019bc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	2b01      	cmp	r3, #1
 800199a:	d105      	bne.n	80019a8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800199c:	2308      	movs	r3, #8
 800199e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	69fa      	ldr	r2, [r7, #28]
 80019a4:	611a      	str	r2, [r3, #16]
          break;
 80019a6:	e009      	b.n	80019bc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019a8:	2308      	movs	r3, #8
 80019aa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	69fa      	ldr	r2, [r7, #28]
 80019b0:	615a      	str	r2, [r3, #20]
          break;
 80019b2:	e003      	b.n	80019bc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80019b4:	2300      	movs	r3, #0
 80019b6:	623b      	str	r3, [r7, #32]
          break;
 80019b8:	e000      	b.n	80019bc <HAL_GPIO_Init+0x130>
          break;
 80019ba:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80019bc:	69bb      	ldr	r3, [r7, #24]
 80019be:	2bff      	cmp	r3, #255	; 0xff
 80019c0:	d801      	bhi.n	80019c6 <HAL_GPIO_Init+0x13a>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	e001      	b.n	80019ca <HAL_GPIO_Init+0x13e>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	3304      	adds	r3, #4
 80019ca:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80019cc:	69bb      	ldr	r3, [r7, #24]
 80019ce:	2bff      	cmp	r3, #255	; 0xff
 80019d0:	d802      	bhi.n	80019d8 <HAL_GPIO_Init+0x14c>
 80019d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	e002      	b.n	80019de <HAL_GPIO_Init+0x152>
 80019d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019da:	3b08      	subs	r3, #8
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	210f      	movs	r1, #15
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	fa01 f303 	lsl.w	r3, r1, r3
 80019ec:	43db      	mvns	r3, r3
 80019ee:	401a      	ands	r2, r3
 80019f0:	6a39      	ldr	r1, [r7, #32]
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	fa01 f303 	lsl.w	r3, r1, r3
 80019f8:	431a      	orrs	r2, r3
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	f000 80a9 	beq.w	8001b5e <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a0c:	4b4a      	ldr	r3, [pc, #296]	; (8001b38 <HAL_GPIO_Init+0x2ac>)
 8001a0e:	699b      	ldr	r3, [r3, #24]
 8001a10:	4a49      	ldr	r2, [pc, #292]	; (8001b38 <HAL_GPIO_Init+0x2ac>)
 8001a12:	f043 0301 	orr.w	r3, r3, #1
 8001a16:	6193      	str	r3, [r2, #24]
 8001a18:	4b47      	ldr	r3, [pc, #284]	; (8001b38 <HAL_GPIO_Init+0x2ac>)
 8001a1a:	699b      	ldr	r3, [r3, #24]
 8001a1c:	f003 0301 	and.w	r3, r3, #1
 8001a20:	60bb      	str	r3, [r7, #8]
 8001a22:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a24:	4a45      	ldr	r2, [pc, #276]	; (8001b3c <HAL_GPIO_Init+0x2b0>)
 8001a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a28:	089b      	lsrs	r3, r3, #2
 8001a2a:	3302      	adds	r3, #2
 8001a2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a30:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a34:	f003 0303 	and.w	r3, r3, #3
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	220f      	movs	r2, #15
 8001a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a40:	43db      	mvns	r3, r3
 8001a42:	68fa      	ldr	r2, [r7, #12]
 8001a44:	4013      	ands	r3, r2
 8001a46:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	4a3d      	ldr	r2, [pc, #244]	; (8001b40 <HAL_GPIO_Init+0x2b4>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d00d      	beq.n	8001a6c <HAL_GPIO_Init+0x1e0>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	4a3c      	ldr	r2, [pc, #240]	; (8001b44 <HAL_GPIO_Init+0x2b8>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d007      	beq.n	8001a68 <HAL_GPIO_Init+0x1dc>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	4a3b      	ldr	r2, [pc, #236]	; (8001b48 <HAL_GPIO_Init+0x2bc>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d101      	bne.n	8001a64 <HAL_GPIO_Init+0x1d8>
 8001a60:	2302      	movs	r3, #2
 8001a62:	e004      	b.n	8001a6e <HAL_GPIO_Init+0x1e2>
 8001a64:	2303      	movs	r3, #3
 8001a66:	e002      	b.n	8001a6e <HAL_GPIO_Init+0x1e2>
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e000      	b.n	8001a6e <HAL_GPIO_Init+0x1e2>
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a70:	f002 0203 	and.w	r2, r2, #3
 8001a74:	0092      	lsls	r2, r2, #2
 8001a76:	4093      	lsls	r3, r2
 8001a78:	68fa      	ldr	r2, [r7, #12]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a7e:	492f      	ldr	r1, [pc, #188]	; (8001b3c <HAL_GPIO_Init+0x2b0>)
 8001a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a82:	089b      	lsrs	r3, r3, #2
 8001a84:	3302      	adds	r3, #2
 8001a86:	68fa      	ldr	r2, [r7, #12]
 8001a88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d006      	beq.n	8001aa6 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a98:	4b2c      	ldr	r3, [pc, #176]	; (8001b4c <HAL_GPIO_Init+0x2c0>)
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	492b      	ldr	r1, [pc, #172]	; (8001b4c <HAL_GPIO_Init+0x2c0>)
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	600b      	str	r3, [r1, #0]
 8001aa4:	e006      	b.n	8001ab4 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001aa6:	4b29      	ldr	r3, [pc, #164]	; (8001b4c <HAL_GPIO_Init+0x2c0>)
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	69bb      	ldr	r3, [r7, #24]
 8001aac:	43db      	mvns	r3, r3
 8001aae:	4927      	ldr	r1, [pc, #156]	; (8001b4c <HAL_GPIO_Init+0x2c0>)
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d006      	beq.n	8001ace <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ac0:	4b22      	ldr	r3, [pc, #136]	; (8001b4c <HAL_GPIO_Init+0x2c0>)
 8001ac2:	685a      	ldr	r2, [r3, #4]
 8001ac4:	4921      	ldr	r1, [pc, #132]	; (8001b4c <HAL_GPIO_Init+0x2c0>)
 8001ac6:	69bb      	ldr	r3, [r7, #24]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	604b      	str	r3, [r1, #4]
 8001acc:	e006      	b.n	8001adc <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ace:	4b1f      	ldr	r3, [pc, #124]	; (8001b4c <HAL_GPIO_Init+0x2c0>)
 8001ad0:	685a      	ldr	r2, [r3, #4]
 8001ad2:	69bb      	ldr	r3, [r7, #24]
 8001ad4:	43db      	mvns	r3, r3
 8001ad6:	491d      	ldr	r1, [pc, #116]	; (8001b4c <HAL_GPIO_Init+0x2c0>)
 8001ad8:	4013      	ands	r3, r2
 8001ada:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d006      	beq.n	8001af6 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ae8:	4b18      	ldr	r3, [pc, #96]	; (8001b4c <HAL_GPIO_Init+0x2c0>)
 8001aea:	689a      	ldr	r2, [r3, #8]
 8001aec:	4917      	ldr	r1, [pc, #92]	; (8001b4c <HAL_GPIO_Init+0x2c0>)
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	608b      	str	r3, [r1, #8]
 8001af4:	e006      	b.n	8001b04 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001af6:	4b15      	ldr	r3, [pc, #84]	; (8001b4c <HAL_GPIO_Init+0x2c0>)
 8001af8:	689a      	ldr	r2, [r3, #8]
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	43db      	mvns	r3, r3
 8001afe:	4913      	ldr	r1, [pc, #76]	; (8001b4c <HAL_GPIO_Init+0x2c0>)
 8001b00:	4013      	ands	r3, r2
 8001b02:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d01f      	beq.n	8001b50 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b10:	4b0e      	ldr	r3, [pc, #56]	; (8001b4c <HAL_GPIO_Init+0x2c0>)
 8001b12:	68da      	ldr	r2, [r3, #12]
 8001b14:	490d      	ldr	r1, [pc, #52]	; (8001b4c <HAL_GPIO_Init+0x2c0>)
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	60cb      	str	r3, [r1, #12]
 8001b1c:	e01f      	b.n	8001b5e <HAL_GPIO_Init+0x2d2>
 8001b1e:	bf00      	nop
 8001b20:	10320000 	.word	0x10320000
 8001b24:	10310000 	.word	0x10310000
 8001b28:	10220000 	.word	0x10220000
 8001b2c:	10210000 	.word	0x10210000
 8001b30:	10120000 	.word	0x10120000
 8001b34:	10110000 	.word	0x10110000
 8001b38:	40021000 	.word	0x40021000
 8001b3c:	40010000 	.word	0x40010000
 8001b40:	40010800 	.word	0x40010800
 8001b44:	40010c00 	.word	0x40010c00
 8001b48:	40011000 	.word	0x40011000
 8001b4c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b50:	4b0b      	ldr	r3, [pc, #44]	; (8001b80 <HAL_GPIO_Init+0x2f4>)
 8001b52:	68da      	ldr	r2, [r3, #12]
 8001b54:	69bb      	ldr	r3, [r7, #24]
 8001b56:	43db      	mvns	r3, r3
 8001b58:	4909      	ldr	r1, [pc, #36]	; (8001b80 <HAL_GPIO_Init+0x2f4>)
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b60:	3301      	adds	r3, #1
 8001b62:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	f47f ae96 	bne.w	80018a0 <HAL_GPIO_Init+0x14>
  }
}
 8001b74:	bf00      	nop
 8001b76:	bf00      	nop
 8001b78:	372c      	adds	r7, #44	; 0x2c
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bc80      	pop	{r7}
 8001b7e:	4770      	bx	lr
 8001b80:	40010400 	.word	0x40010400

08001b84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	460b      	mov	r3, r1
 8001b8e:	807b      	strh	r3, [r7, #2]
 8001b90:	4613      	mov	r3, r2
 8001b92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b94:	787b      	ldrb	r3, [r7, #1]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d003      	beq.n	8001ba2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b9a:	887a      	ldrh	r2, [r7, #2]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ba0:	e003      	b.n	8001baa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ba2:	887b      	ldrh	r3, [r7, #2]
 8001ba4:	041a      	lsls	r2, r3, #16
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	611a      	str	r2, [r3, #16]
}
 8001baa:	bf00      	nop
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bc80      	pop	{r7}
 8001bb2:	4770      	bx	lr

08001bb4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	4603      	mov	r3, r0
 8001bbc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001bbe:	4b08      	ldr	r3, [pc, #32]	; (8001be0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001bc0:	695a      	ldr	r2, [r3, #20]
 8001bc2:	88fb      	ldrh	r3, [r7, #6]
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d006      	beq.n	8001bd8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001bca:	4a05      	ldr	r2, [pc, #20]	; (8001be0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001bcc:	88fb      	ldrh	r3, [r7, #6]
 8001bce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001bd0:	88fb      	ldrh	r3, [r7, #6]
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f7fe fd3e 	bl	8000654 <HAL_GPIO_EXTI_Callback>
  }
}
 8001bd8:	bf00      	nop
 8001bda:	3708      	adds	r7, #8
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	40010400 	.word	0x40010400

08001be4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b086      	sub	sp, #24
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d101      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e272      	b.n	80020dc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0301 	and.w	r3, r3, #1
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	f000 8087 	beq.w	8001d12 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c04:	4b92      	ldr	r3, [pc, #584]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f003 030c 	and.w	r3, r3, #12
 8001c0c:	2b04      	cmp	r3, #4
 8001c0e:	d00c      	beq.n	8001c2a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c10:	4b8f      	ldr	r3, [pc, #572]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f003 030c 	and.w	r3, r3, #12
 8001c18:	2b08      	cmp	r3, #8
 8001c1a:	d112      	bne.n	8001c42 <HAL_RCC_OscConfig+0x5e>
 8001c1c:	4b8c      	ldr	r3, [pc, #560]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c28:	d10b      	bne.n	8001c42 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c2a:	4b89      	ldr	r3, [pc, #548]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d06c      	beq.n	8001d10 <HAL_RCC_OscConfig+0x12c>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d168      	bne.n	8001d10 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e24c      	b.n	80020dc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c4a:	d106      	bne.n	8001c5a <HAL_RCC_OscConfig+0x76>
 8001c4c:	4b80      	ldr	r3, [pc, #512]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a7f      	ldr	r2, [pc, #508]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001c52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c56:	6013      	str	r3, [r2, #0]
 8001c58:	e02e      	b.n	8001cb8 <HAL_RCC_OscConfig+0xd4>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d10c      	bne.n	8001c7c <HAL_RCC_OscConfig+0x98>
 8001c62:	4b7b      	ldr	r3, [pc, #492]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a7a      	ldr	r2, [pc, #488]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001c68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c6c:	6013      	str	r3, [r2, #0]
 8001c6e:	4b78      	ldr	r3, [pc, #480]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a77      	ldr	r2, [pc, #476]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001c74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c78:	6013      	str	r3, [r2, #0]
 8001c7a:	e01d      	b.n	8001cb8 <HAL_RCC_OscConfig+0xd4>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c84:	d10c      	bne.n	8001ca0 <HAL_RCC_OscConfig+0xbc>
 8001c86:	4b72      	ldr	r3, [pc, #456]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a71      	ldr	r2, [pc, #452]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001c8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c90:	6013      	str	r3, [r2, #0]
 8001c92:	4b6f      	ldr	r3, [pc, #444]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a6e      	ldr	r2, [pc, #440]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001c98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c9c:	6013      	str	r3, [r2, #0]
 8001c9e:	e00b      	b.n	8001cb8 <HAL_RCC_OscConfig+0xd4>
 8001ca0:	4b6b      	ldr	r3, [pc, #428]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a6a      	ldr	r2, [pc, #424]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001ca6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001caa:	6013      	str	r3, [r2, #0]
 8001cac:	4b68      	ldr	r3, [pc, #416]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a67      	ldr	r2, [pc, #412]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001cb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cb6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d013      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc0:	f7ff f850 	bl	8000d64 <HAL_GetTick>
 8001cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cc6:	e008      	b.n	8001cda <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cc8:	f7ff f84c 	bl	8000d64 <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	2b64      	cmp	r3, #100	; 0x64
 8001cd4:	d901      	bls.n	8001cda <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e200      	b.n	80020dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cda:	4b5d      	ldr	r3, [pc, #372]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d0f0      	beq.n	8001cc8 <HAL_RCC_OscConfig+0xe4>
 8001ce6:	e014      	b.n	8001d12 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce8:	f7ff f83c 	bl	8000d64 <HAL_GetTick>
 8001cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cee:	e008      	b.n	8001d02 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cf0:	f7ff f838 	bl	8000d64 <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	2b64      	cmp	r3, #100	; 0x64
 8001cfc:	d901      	bls.n	8001d02 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e1ec      	b.n	80020dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d02:	4b53      	ldr	r3, [pc, #332]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d1f0      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x10c>
 8001d0e:	e000      	b.n	8001d12 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0302 	and.w	r3, r3, #2
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d063      	beq.n	8001de6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d1e:	4b4c      	ldr	r3, [pc, #304]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f003 030c 	and.w	r3, r3, #12
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d00b      	beq.n	8001d42 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d2a:	4b49      	ldr	r3, [pc, #292]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f003 030c 	and.w	r3, r3, #12
 8001d32:	2b08      	cmp	r3, #8
 8001d34:	d11c      	bne.n	8001d70 <HAL_RCC_OscConfig+0x18c>
 8001d36:	4b46      	ldr	r3, [pc, #280]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d116      	bne.n	8001d70 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d42:	4b43      	ldr	r3, [pc, #268]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0302 	and.w	r3, r3, #2
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d005      	beq.n	8001d5a <HAL_RCC_OscConfig+0x176>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	691b      	ldr	r3, [r3, #16]
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d001      	beq.n	8001d5a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e1c0      	b.n	80020dc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d5a:	4b3d      	ldr	r3, [pc, #244]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	695b      	ldr	r3, [r3, #20]
 8001d66:	00db      	lsls	r3, r3, #3
 8001d68:	4939      	ldr	r1, [pc, #228]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d6e:	e03a      	b.n	8001de6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	691b      	ldr	r3, [r3, #16]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d020      	beq.n	8001dba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d78:	4b36      	ldr	r3, [pc, #216]	; (8001e54 <HAL_RCC_OscConfig+0x270>)
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d7e:	f7fe fff1 	bl	8000d64 <HAL_GetTick>
 8001d82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d84:	e008      	b.n	8001d98 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d86:	f7fe ffed 	bl	8000d64 <HAL_GetTick>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d901      	bls.n	8001d98 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d94:	2303      	movs	r3, #3
 8001d96:	e1a1      	b.n	80020dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d98:	4b2d      	ldr	r3, [pc, #180]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0302 	and.w	r3, r3, #2
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d0f0      	beq.n	8001d86 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001da4:	4b2a      	ldr	r3, [pc, #168]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	695b      	ldr	r3, [r3, #20]
 8001db0:	00db      	lsls	r3, r3, #3
 8001db2:	4927      	ldr	r1, [pc, #156]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001db4:	4313      	orrs	r3, r2
 8001db6:	600b      	str	r3, [r1, #0]
 8001db8:	e015      	b.n	8001de6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dba:	4b26      	ldr	r3, [pc, #152]	; (8001e54 <HAL_RCC_OscConfig+0x270>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc0:	f7fe ffd0 	bl	8000d64 <HAL_GetTick>
 8001dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dc6:	e008      	b.n	8001dda <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dc8:	f7fe ffcc 	bl	8000d64 <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e180      	b.n	80020dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dda:	4b1d      	ldr	r3, [pc, #116]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0302 	and.w	r3, r3, #2
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d1f0      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0308 	and.w	r3, r3, #8
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d03a      	beq.n	8001e68 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	699b      	ldr	r3, [r3, #24]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d019      	beq.n	8001e2e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dfa:	4b17      	ldr	r3, [pc, #92]	; (8001e58 <HAL_RCC_OscConfig+0x274>)
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e00:	f7fe ffb0 	bl	8000d64 <HAL_GetTick>
 8001e04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e06:	e008      	b.n	8001e1a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e08:	f7fe ffac 	bl	8000d64 <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d901      	bls.n	8001e1a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	e160      	b.n	80020dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e1a:	4b0d      	ldr	r3, [pc, #52]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1e:	f003 0302 	and.w	r3, r3, #2
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d0f0      	beq.n	8001e08 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e26:	2001      	movs	r0, #1
 8001e28:	f000 fac4 	bl	80023b4 <RCC_Delay>
 8001e2c:	e01c      	b.n	8001e68 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e2e:	4b0a      	ldr	r3, [pc, #40]	; (8001e58 <HAL_RCC_OscConfig+0x274>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e34:	f7fe ff96 	bl	8000d64 <HAL_GetTick>
 8001e38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e3a:	e00f      	b.n	8001e5c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e3c:	f7fe ff92 	bl	8000d64 <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d908      	bls.n	8001e5c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e146      	b.n	80020dc <HAL_RCC_OscConfig+0x4f8>
 8001e4e:	bf00      	nop
 8001e50:	40021000 	.word	0x40021000
 8001e54:	42420000 	.word	0x42420000
 8001e58:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e5c:	4b92      	ldr	r3, [pc, #584]	; (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e60:	f003 0302 	and.w	r3, r3, #2
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d1e9      	bne.n	8001e3c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0304 	and.w	r3, r3, #4
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	f000 80a6 	beq.w	8001fc2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e76:	2300      	movs	r3, #0
 8001e78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e7a:	4b8b      	ldr	r3, [pc, #556]	; (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001e7c:	69db      	ldr	r3, [r3, #28]
 8001e7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d10d      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e86:	4b88      	ldr	r3, [pc, #544]	; (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001e88:	69db      	ldr	r3, [r3, #28]
 8001e8a:	4a87      	ldr	r2, [pc, #540]	; (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001e8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e90:	61d3      	str	r3, [r2, #28]
 8001e92:	4b85      	ldr	r3, [pc, #532]	; (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001e94:	69db      	ldr	r3, [r3, #28]
 8001e96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e9a:	60bb      	str	r3, [r7, #8]
 8001e9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ea2:	4b82      	ldr	r3, [pc, #520]	; (80020ac <HAL_RCC_OscConfig+0x4c8>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d118      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001eae:	4b7f      	ldr	r3, [pc, #508]	; (80020ac <HAL_RCC_OscConfig+0x4c8>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a7e      	ldr	r2, [pc, #504]	; (80020ac <HAL_RCC_OscConfig+0x4c8>)
 8001eb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001eba:	f7fe ff53 	bl	8000d64 <HAL_GetTick>
 8001ebe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ec0:	e008      	b.n	8001ed4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ec2:	f7fe ff4f 	bl	8000d64 <HAL_GetTick>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	1ad3      	subs	r3, r2, r3
 8001ecc:	2b64      	cmp	r3, #100	; 0x64
 8001ece:	d901      	bls.n	8001ed4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	e103      	b.n	80020dc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ed4:	4b75      	ldr	r3, [pc, #468]	; (80020ac <HAL_RCC_OscConfig+0x4c8>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d0f0      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d106      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x312>
 8001ee8:	4b6f      	ldr	r3, [pc, #444]	; (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001eea:	6a1b      	ldr	r3, [r3, #32]
 8001eec:	4a6e      	ldr	r2, [pc, #440]	; (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001eee:	f043 0301 	orr.w	r3, r3, #1
 8001ef2:	6213      	str	r3, [r2, #32]
 8001ef4:	e02d      	b.n	8001f52 <HAL_RCC_OscConfig+0x36e>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d10c      	bne.n	8001f18 <HAL_RCC_OscConfig+0x334>
 8001efe:	4b6a      	ldr	r3, [pc, #424]	; (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001f00:	6a1b      	ldr	r3, [r3, #32]
 8001f02:	4a69      	ldr	r2, [pc, #420]	; (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001f04:	f023 0301 	bic.w	r3, r3, #1
 8001f08:	6213      	str	r3, [r2, #32]
 8001f0a:	4b67      	ldr	r3, [pc, #412]	; (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001f0c:	6a1b      	ldr	r3, [r3, #32]
 8001f0e:	4a66      	ldr	r2, [pc, #408]	; (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001f10:	f023 0304 	bic.w	r3, r3, #4
 8001f14:	6213      	str	r3, [r2, #32]
 8001f16:	e01c      	b.n	8001f52 <HAL_RCC_OscConfig+0x36e>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	2b05      	cmp	r3, #5
 8001f1e:	d10c      	bne.n	8001f3a <HAL_RCC_OscConfig+0x356>
 8001f20:	4b61      	ldr	r3, [pc, #388]	; (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001f22:	6a1b      	ldr	r3, [r3, #32]
 8001f24:	4a60      	ldr	r2, [pc, #384]	; (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001f26:	f043 0304 	orr.w	r3, r3, #4
 8001f2a:	6213      	str	r3, [r2, #32]
 8001f2c:	4b5e      	ldr	r3, [pc, #376]	; (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001f2e:	6a1b      	ldr	r3, [r3, #32]
 8001f30:	4a5d      	ldr	r2, [pc, #372]	; (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001f32:	f043 0301 	orr.w	r3, r3, #1
 8001f36:	6213      	str	r3, [r2, #32]
 8001f38:	e00b      	b.n	8001f52 <HAL_RCC_OscConfig+0x36e>
 8001f3a:	4b5b      	ldr	r3, [pc, #364]	; (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001f3c:	6a1b      	ldr	r3, [r3, #32]
 8001f3e:	4a5a      	ldr	r2, [pc, #360]	; (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001f40:	f023 0301 	bic.w	r3, r3, #1
 8001f44:	6213      	str	r3, [r2, #32]
 8001f46:	4b58      	ldr	r3, [pc, #352]	; (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001f48:	6a1b      	ldr	r3, [r3, #32]
 8001f4a:	4a57      	ldr	r2, [pc, #348]	; (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001f4c:	f023 0304 	bic.w	r3, r3, #4
 8001f50:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d015      	beq.n	8001f86 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f5a:	f7fe ff03 	bl	8000d64 <HAL_GetTick>
 8001f5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f60:	e00a      	b.n	8001f78 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f62:	f7fe feff 	bl	8000d64 <HAL_GetTick>
 8001f66:	4602      	mov	r2, r0
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d901      	bls.n	8001f78 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f74:	2303      	movs	r3, #3
 8001f76:	e0b1      	b.n	80020dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f78:	4b4b      	ldr	r3, [pc, #300]	; (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001f7a:	6a1b      	ldr	r3, [r3, #32]
 8001f7c:	f003 0302 	and.w	r3, r3, #2
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d0ee      	beq.n	8001f62 <HAL_RCC_OscConfig+0x37e>
 8001f84:	e014      	b.n	8001fb0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f86:	f7fe feed 	bl	8000d64 <HAL_GetTick>
 8001f8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f8c:	e00a      	b.n	8001fa4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f8e:	f7fe fee9 	bl	8000d64 <HAL_GetTick>
 8001f92:	4602      	mov	r2, r0
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d901      	bls.n	8001fa4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	e09b      	b.n	80020dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fa4:	4b40      	ldr	r3, [pc, #256]	; (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001fa6:	6a1b      	ldr	r3, [r3, #32]
 8001fa8:	f003 0302 	and.w	r3, r3, #2
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d1ee      	bne.n	8001f8e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001fb0:	7dfb      	ldrb	r3, [r7, #23]
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d105      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fb6:	4b3c      	ldr	r3, [pc, #240]	; (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001fb8:	69db      	ldr	r3, [r3, #28]
 8001fba:	4a3b      	ldr	r2, [pc, #236]	; (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001fbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fc0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	69db      	ldr	r3, [r3, #28]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	f000 8087 	beq.w	80020da <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fcc:	4b36      	ldr	r3, [pc, #216]	; (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f003 030c 	and.w	r3, r3, #12
 8001fd4:	2b08      	cmp	r3, #8
 8001fd6:	d061      	beq.n	800209c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	69db      	ldr	r3, [r3, #28]
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	d146      	bne.n	800206e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fe0:	4b33      	ldr	r3, [pc, #204]	; (80020b0 <HAL_RCC_OscConfig+0x4cc>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe6:	f7fe febd 	bl	8000d64 <HAL_GetTick>
 8001fea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fec:	e008      	b.n	8002000 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fee:	f7fe feb9 	bl	8000d64 <HAL_GetTick>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d901      	bls.n	8002000 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	e06d      	b.n	80020dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002000:	4b29      	ldr	r3, [pc, #164]	; (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d1f0      	bne.n	8001fee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6a1b      	ldr	r3, [r3, #32]
 8002010:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002014:	d108      	bne.n	8002028 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002016:	4b24      	ldr	r3, [pc, #144]	; (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	4921      	ldr	r1, [pc, #132]	; (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8002024:	4313      	orrs	r3, r2
 8002026:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002028:	4b1f      	ldr	r3, [pc, #124]	; (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6a19      	ldr	r1, [r3, #32]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002038:	430b      	orrs	r3, r1
 800203a:	491b      	ldr	r1, [pc, #108]	; (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 800203c:	4313      	orrs	r3, r2
 800203e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002040:	4b1b      	ldr	r3, [pc, #108]	; (80020b0 <HAL_RCC_OscConfig+0x4cc>)
 8002042:	2201      	movs	r2, #1
 8002044:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002046:	f7fe fe8d 	bl	8000d64 <HAL_GetTick>
 800204a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800204c:	e008      	b.n	8002060 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800204e:	f7fe fe89 	bl	8000d64 <HAL_GetTick>
 8002052:	4602      	mov	r2, r0
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	2b02      	cmp	r3, #2
 800205a:	d901      	bls.n	8002060 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800205c:	2303      	movs	r3, #3
 800205e:	e03d      	b.n	80020dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002060:	4b11      	ldr	r3, [pc, #68]	; (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002068:	2b00      	cmp	r3, #0
 800206a:	d0f0      	beq.n	800204e <HAL_RCC_OscConfig+0x46a>
 800206c:	e035      	b.n	80020da <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800206e:	4b10      	ldr	r3, [pc, #64]	; (80020b0 <HAL_RCC_OscConfig+0x4cc>)
 8002070:	2200      	movs	r2, #0
 8002072:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002074:	f7fe fe76 	bl	8000d64 <HAL_GetTick>
 8002078:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800207a:	e008      	b.n	800208e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800207c:	f7fe fe72 	bl	8000d64 <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	2b02      	cmp	r3, #2
 8002088:	d901      	bls.n	800208e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	e026      	b.n	80020dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800208e:	4b06      	ldr	r3, [pc, #24]	; (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d1f0      	bne.n	800207c <HAL_RCC_OscConfig+0x498>
 800209a:	e01e      	b.n	80020da <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	69db      	ldr	r3, [r3, #28]
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d107      	bne.n	80020b4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e019      	b.n	80020dc <HAL_RCC_OscConfig+0x4f8>
 80020a8:	40021000 	.word	0x40021000
 80020ac:	40007000 	.word	0x40007000
 80020b0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020b4:	4b0b      	ldr	r3, [pc, #44]	; (80020e4 <HAL_RCC_OscConfig+0x500>)
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6a1b      	ldr	r3, [r3, #32]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d106      	bne.n	80020d6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d001      	beq.n	80020da <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e000      	b.n	80020dc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80020da:	2300      	movs	r3, #0
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3718      	adds	r7, #24
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	40021000 	.word	0x40021000

080020e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d101      	bne.n	80020fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e0d0      	b.n	800229e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020fc:	4b6a      	ldr	r3, [pc, #424]	; (80022a8 <HAL_RCC_ClockConfig+0x1c0>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0307 	and.w	r3, r3, #7
 8002104:	683a      	ldr	r2, [r7, #0]
 8002106:	429a      	cmp	r2, r3
 8002108:	d910      	bls.n	800212c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800210a:	4b67      	ldr	r3, [pc, #412]	; (80022a8 <HAL_RCC_ClockConfig+0x1c0>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f023 0207 	bic.w	r2, r3, #7
 8002112:	4965      	ldr	r1, [pc, #404]	; (80022a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	4313      	orrs	r3, r2
 8002118:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800211a:	4b63      	ldr	r3, [pc, #396]	; (80022a8 <HAL_RCC_ClockConfig+0x1c0>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0307 	and.w	r3, r3, #7
 8002122:	683a      	ldr	r2, [r7, #0]
 8002124:	429a      	cmp	r2, r3
 8002126:	d001      	beq.n	800212c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e0b8      	b.n	800229e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0302 	and.w	r3, r3, #2
 8002134:	2b00      	cmp	r3, #0
 8002136:	d020      	beq.n	800217a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0304 	and.w	r3, r3, #4
 8002140:	2b00      	cmp	r3, #0
 8002142:	d005      	beq.n	8002150 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002144:	4b59      	ldr	r3, [pc, #356]	; (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	4a58      	ldr	r2, [pc, #352]	; (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 800214a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800214e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0308 	and.w	r3, r3, #8
 8002158:	2b00      	cmp	r3, #0
 800215a:	d005      	beq.n	8002168 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800215c:	4b53      	ldr	r3, [pc, #332]	; (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	4a52      	ldr	r2, [pc, #328]	; (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 8002162:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002166:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002168:	4b50      	ldr	r3, [pc, #320]	; (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	494d      	ldr	r1, [pc, #308]	; (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 8002176:	4313      	orrs	r3, r2
 8002178:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0301 	and.w	r3, r3, #1
 8002182:	2b00      	cmp	r3, #0
 8002184:	d040      	beq.n	8002208 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	2b01      	cmp	r3, #1
 800218c:	d107      	bne.n	800219e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800218e:	4b47      	ldr	r3, [pc, #284]	; (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d115      	bne.n	80021c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e07f      	b.n	800229e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d107      	bne.n	80021b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021a6:	4b41      	ldr	r3, [pc, #260]	; (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d109      	bne.n	80021c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e073      	b.n	800229e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021b6:	4b3d      	ldr	r3, [pc, #244]	; (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0302 	and.w	r3, r3, #2
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d101      	bne.n	80021c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e06b      	b.n	800229e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021c6:	4b39      	ldr	r3, [pc, #228]	; (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f023 0203 	bic.w	r2, r3, #3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	4936      	ldr	r1, [pc, #216]	; (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 80021d4:	4313      	orrs	r3, r2
 80021d6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021d8:	f7fe fdc4 	bl	8000d64 <HAL_GetTick>
 80021dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021de:	e00a      	b.n	80021f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021e0:	f7fe fdc0 	bl	8000d64 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d901      	bls.n	80021f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e053      	b.n	800229e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021f6:	4b2d      	ldr	r3, [pc, #180]	; (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	f003 020c 	and.w	r2, r3, #12
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	429a      	cmp	r2, r3
 8002206:	d1eb      	bne.n	80021e0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002208:	4b27      	ldr	r3, [pc, #156]	; (80022a8 <HAL_RCC_ClockConfig+0x1c0>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0307 	and.w	r3, r3, #7
 8002210:	683a      	ldr	r2, [r7, #0]
 8002212:	429a      	cmp	r2, r3
 8002214:	d210      	bcs.n	8002238 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002216:	4b24      	ldr	r3, [pc, #144]	; (80022a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f023 0207 	bic.w	r2, r3, #7
 800221e:	4922      	ldr	r1, [pc, #136]	; (80022a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	4313      	orrs	r3, r2
 8002224:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002226:	4b20      	ldr	r3, [pc, #128]	; (80022a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0307 	and.w	r3, r3, #7
 800222e:	683a      	ldr	r2, [r7, #0]
 8002230:	429a      	cmp	r2, r3
 8002232:	d001      	beq.n	8002238 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e032      	b.n	800229e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0304 	and.w	r3, r3, #4
 8002240:	2b00      	cmp	r3, #0
 8002242:	d008      	beq.n	8002256 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002244:	4b19      	ldr	r3, [pc, #100]	; (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	4916      	ldr	r1, [pc, #88]	; (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 8002252:	4313      	orrs	r3, r2
 8002254:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0308 	and.w	r3, r3, #8
 800225e:	2b00      	cmp	r3, #0
 8002260:	d009      	beq.n	8002276 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002262:	4b12      	ldr	r3, [pc, #72]	; (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	691b      	ldr	r3, [r3, #16]
 800226e:	00db      	lsls	r3, r3, #3
 8002270:	490e      	ldr	r1, [pc, #56]	; (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 8002272:	4313      	orrs	r3, r2
 8002274:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002276:	f000 f821 	bl	80022bc <HAL_RCC_GetSysClockFreq>
 800227a:	4602      	mov	r2, r0
 800227c:	4b0b      	ldr	r3, [pc, #44]	; (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	091b      	lsrs	r3, r3, #4
 8002282:	f003 030f 	and.w	r3, r3, #15
 8002286:	490a      	ldr	r1, [pc, #40]	; (80022b0 <HAL_RCC_ClockConfig+0x1c8>)
 8002288:	5ccb      	ldrb	r3, [r1, r3]
 800228a:	fa22 f303 	lsr.w	r3, r2, r3
 800228e:	4a09      	ldr	r2, [pc, #36]	; (80022b4 <HAL_RCC_ClockConfig+0x1cc>)
 8002290:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002292:	4b09      	ldr	r3, [pc, #36]	; (80022b8 <HAL_RCC_ClockConfig+0x1d0>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4618      	mov	r0, r3
 8002298:	f7fe fd22 	bl	8000ce0 <HAL_InitTick>

  return HAL_OK;
 800229c:	2300      	movs	r3, #0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3710      	adds	r7, #16
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	40022000 	.word	0x40022000
 80022ac:	40021000 	.word	0x40021000
 80022b0:	08003080 	.word	0x08003080
 80022b4:	20000000 	.word	0x20000000
 80022b8:	20000004 	.word	0x20000004

080022bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022bc:	b490      	push	{r4, r7}
 80022be:	b08a      	sub	sp, #40	; 0x28
 80022c0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80022c2:	4b29      	ldr	r3, [pc, #164]	; (8002368 <HAL_RCC_GetSysClockFreq+0xac>)
 80022c4:	1d3c      	adds	r4, r7, #4
 80022c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80022c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80022cc:	f240 2301 	movw	r3, #513	; 0x201
 80022d0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022d2:	2300      	movs	r3, #0
 80022d4:	61fb      	str	r3, [r7, #28]
 80022d6:	2300      	movs	r3, #0
 80022d8:	61bb      	str	r3, [r7, #24]
 80022da:	2300      	movs	r3, #0
 80022dc:	627b      	str	r3, [r7, #36]	; 0x24
 80022de:	2300      	movs	r3, #0
 80022e0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80022e2:	2300      	movs	r3, #0
 80022e4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80022e6:	4b21      	ldr	r3, [pc, #132]	; (800236c <HAL_RCC_GetSysClockFreq+0xb0>)
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	f003 030c 	and.w	r3, r3, #12
 80022f2:	2b04      	cmp	r3, #4
 80022f4:	d002      	beq.n	80022fc <HAL_RCC_GetSysClockFreq+0x40>
 80022f6:	2b08      	cmp	r3, #8
 80022f8:	d003      	beq.n	8002302 <HAL_RCC_GetSysClockFreq+0x46>
 80022fa:	e02b      	b.n	8002354 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022fc:	4b1c      	ldr	r3, [pc, #112]	; (8002370 <HAL_RCC_GetSysClockFreq+0xb4>)
 80022fe:	623b      	str	r3, [r7, #32]
      break;
 8002300:	e02b      	b.n	800235a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	0c9b      	lsrs	r3, r3, #18
 8002306:	f003 030f 	and.w	r3, r3, #15
 800230a:	3328      	adds	r3, #40	; 0x28
 800230c:	443b      	add	r3, r7
 800230e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002312:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800231a:	2b00      	cmp	r3, #0
 800231c:	d012      	beq.n	8002344 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800231e:	4b13      	ldr	r3, [pc, #76]	; (800236c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	0c5b      	lsrs	r3, r3, #17
 8002324:	f003 0301 	and.w	r3, r3, #1
 8002328:	3328      	adds	r3, #40	; 0x28
 800232a:	443b      	add	r3, r7
 800232c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002330:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	4a0e      	ldr	r2, [pc, #56]	; (8002370 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002336:	fb03 f202 	mul.w	r2, r3, r2
 800233a:	69bb      	ldr	r3, [r7, #24]
 800233c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002340:	627b      	str	r3, [r7, #36]	; 0x24
 8002342:	e004      	b.n	800234e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	4a0b      	ldr	r2, [pc, #44]	; (8002374 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002348:	fb02 f303 	mul.w	r3, r2, r3
 800234c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800234e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002350:	623b      	str	r3, [r7, #32]
      break;
 8002352:	e002      	b.n	800235a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002354:	4b06      	ldr	r3, [pc, #24]	; (8002370 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002356:	623b      	str	r3, [r7, #32]
      break;
 8002358:	bf00      	nop
    }
  }
  return sysclockfreq;
 800235a:	6a3b      	ldr	r3, [r7, #32]
}
 800235c:	4618      	mov	r0, r3
 800235e:	3728      	adds	r7, #40	; 0x28
 8002360:	46bd      	mov	sp, r7
 8002362:	bc90      	pop	{r4, r7}
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	08003060 	.word	0x08003060
 800236c:	40021000 	.word	0x40021000
 8002370:	007a1200 	.word	0x007a1200
 8002374:	003d0900 	.word	0x003d0900

08002378 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800237c:	4b02      	ldr	r3, [pc, #8]	; (8002388 <HAL_RCC_GetHCLKFreq+0x10>)
 800237e:	681b      	ldr	r3, [r3, #0]
}
 8002380:	4618      	mov	r0, r3
 8002382:	46bd      	mov	sp, r7
 8002384:	bc80      	pop	{r7}
 8002386:	4770      	bx	lr
 8002388:	20000000 	.word	0x20000000

0800238c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002390:	f7ff fff2 	bl	8002378 <HAL_RCC_GetHCLKFreq>
 8002394:	4602      	mov	r2, r0
 8002396:	4b05      	ldr	r3, [pc, #20]	; (80023ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	0adb      	lsrs	r3, r3, #11
 800239c:	f003 0307 	and.w	r3, r3, #7
 80023a0:	4903      	ldr	r1, [pc, #12]	; (80023b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023a2:	5ccb      	ldrb	r3, [r1, r3]
 80023a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	40021000 	.word	0x40021000
 80023b0:	08003090 	.word	0x08003090

080023b4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b085      	sub	sp, #20
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80023bc:	4b0a      	ldr	r3, [pc, #40]	; (80023e8 <RCC_Delay+0x34>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a0a      	ldr	r2, [pc, #40]	; (80023ec <RCC_Delay+0x38>)
 80023c2:	fba2 2303 	umull	r2, r3, r2, r3
 80023c6:	0a5b      	lsrs	r3, r3, #9
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	fb02 f303 	mul.w	r3, r2, r3
 80023ce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80023d0:	bf00      	nop
  }
  while (Delay --);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	1e5a      	subs	r2, r3, #1
 80023d6:	60fa      	str	r2, [r7, #12]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d1f9      	bne.n	80023d0 <RCC_Delay+0x1c>
}
 80023dc:	bf00      	nop
 80023de:	bf00      	nop
 80023e0:	3714      	adds	r7, #20
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bc80      	pop	{r7}
 80023e6:	4770      	bx	lr
 80023e8:	20000000 	.word	0x20000000
 80023ec:	10624dd3 	.word	0x10624dd3

080023f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b086      	sub	sp, #24
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80023f8:	2300      	movs	r3, #0
 80023fa:	613b      	str	r3, [r7, #16]
 80023fc:	2300      	movs	r3, #0
 80023fe:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0301 	and.w	r3, r3, #1
 8002408:	2b00      	cmp	r3, #0
 800240a:	d07d      	beq.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800240c:	2300      	movs	r3, #0
 800240e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002410:	4b4f      	ldr	r3, [pc, #316]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002412:	69db      	ldr	r3, [r3, #28]
 8002414:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d10d      	bne.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800241c:	4b4c      	ldr	r3, [pc, #304]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800241e:	69db      	ldr	r3, [r3, #28]
 8002420:	4a4b      	ldr	r2, [pc, #300]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002422:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002426:	61d3      	str	r3, [r2, #28]
 8002428:	4b49      	ldr	r3, [pc, #292]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800242a:	69db      	ldr	r3, [r3, #28]
 800242c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002430:	60bb      	str	r3, [r7, #8]
 8002432:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002434:	2301      	movs	r3, #1
 8002436:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002438:	4b46      	ldr	r3, [pc, #280]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002440:	2b00      	cmp	r3, #0
 8002442:	d118      	bne.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002444:	4b43      	ldr	r3, [pc, #268]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a42      	ldr	r2, [pc, #264]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800244a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800244e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002450:	f7fe fc88 	bl	8000d64 <HAL_GetTick>
 8002454:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002456:	e008      	b.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002458:	f7fe fc84 	bl	8000d64 <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	2b64      	cmp	r3, #100	; 0x64
 8002464:	d901      	bls.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e06d      	b.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800246a:	4b3a      	ldr	r3, [pc, #232]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002472:	2b00      	cmp	r3, #0
 8002474:	d0f0      	beq.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002476:	4b36      	ldr	r3, [pc, #216]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002478:	6a1b      	ldr	r3, [r3, #32]
 800247a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800247e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d02e      	beq.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800248e:	68fa      	ldr	r2, [r7, #12]
 8002490:	429a      	cmp	r2, r3
 8002492:	d027      	beq.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002494:	4b2e      	ldr	r3, [pc, #184]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002496:	6a1b      	ldr	r3, [r3, #32]
 8002498:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800249c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800249e:	4b2e      	ldr	r3, [pc, #184]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80024a0:	2201      	movs	r2, #1
 80024a2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80024a4:	4b2c      	ldr	r3, [pc, #176]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80024aa:	4a29      	ldr	r2, [pc, #164]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f003 0301 	and.w	r3, r3, #1
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d014      	beq.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ba:	f7fe fc53 	bl	8000d64 <HAL_GetTick>
 80024be:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024c0:	e00a      	b.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024c2:	f7fe fc4f 	bl	8000d64 <HAL_GetTick>
 80024c6:	4602      	mov	r2, r0
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d901      	bls.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80024d4:	2303      	movs	r3, #3
 80024d6:	e036      	b.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024d8:	4b1d      	ldr	r3, [pc, #116]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024da:	6a1b      	ldr	r3, [r3, #32]
 80024dc:	f003 0302 	and.w	r3, r3, #2
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d0ee      	beq.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024e4:	4b1a      	ldr	r3, [pc, #104]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024e6:	6a1b      	ldr	r3, [r3, #32]
 80024e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	4917      	ldr	r1, [pc, #92]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024f2:	4313      	orrs	r3, r2
 80024f4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80024f6:	7dfb      	ldrb	r3, [r7, #23]
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d105      	bne.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024fc:	4b14      	ldr	r3, [pc, #80]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024fe:	69db      	ldr	r3, [r3, #28]
 8002500:	4a13      	ldr	r2, [pc, #76]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002502:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002506:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0302 	and.w	r3, r3, #2
 8002510:	2b00      	cmp	r3, #0
 8002512:	d008      	beq.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002514:	4b0e      	ldr	r3, [pc, #56]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	490b      	ldr	r1, [pc, #44]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002522:	4313      	orrs	r3, r2
 8002524:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0310 	and.w	r3, r3, #16
 800252e:	2b00      	cmp	r3, #0
 8002530:	d008      	beq.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002532:	4b07      	ldr	r3, [pc, #28]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	4904      	ldr	r1, [pc, #16]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002540:	4313      	orrs	r3, r2
 8002542:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002544:	2300      	movs	r3, #0
}
 8002546:	4618      	mov	r0, r3
 8002548:	3718      	adds	r7, #24
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	40021000 	.word	0x40021000
 8002554:	40007000 	.word	0x40007000
 8002558:	42420440 	.word	0x42420440

0800255c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800255c:	b590      	push	{r4, r7, lr}
 800255e:	b08d      	sub	sp, #52	; 0x34
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002564:	4b58      	ldr	r3, [pc, #352]	; (80026c8 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8002566:	f107 040c 	add.w	r4, r7, #12
 800256a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800256c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002570:	f240 2301 	movw	r3, #513	; 0x201
 8002574:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002576:	2300      	movs	r3, #0
 8002578:	627b      	str	r3, [r7, #36]	; 0x24
 800257a:	2300      	movs	r3, #0
 800257c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800257e:	2300      	movs	r3, #0
 8002580:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002582:	2300      	movs	r3, #0
 8002584:	61fb      	str	r3, [r7, #28]
 8002586:	2300      	movs	r3, #0
 8002588:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2b10      	cmp	r3, #16
 800258e:	d00a      	beq.n	80025a6 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2b10      	cmp	r3, #16
 8002594:	f200 808e 	bhi.w	80026b4 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2b01      	cmp	r3, #1
 800259c:	d049      	beq.n	8002632 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d079      	beq.n	8002698 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80025a4:	e086      	b.n	80026b4 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 80025a6:	4b49      	ldr	r3, [pc, #292]	; (80026cc <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80025ac:	4b47      	ldr	r3, [pc, #284]	; (80026cc <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d07f      	beq.n	80026b8 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	0c9b      	lsrs	r3, r3, #18
 80025bc:	f003 030f 	and.w	r3, r3, #15
 80025c0:	3330      	adds	r3, #48	; 0x30
 80025c2:	443b      	add	r3, r7
 80025c4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80025c8:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d017      	beq.n	8002604 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80025d4:	4b3d      	ldr	r3, [pc, #244]	; (80026cc <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	0c5b      	lsrs	r3, r3, #17
 80025da:	f003 0301 	and.w	r3, r3, #1
 80025de:	3330      	adds	r3, #48	; 0x30
 80025e0:	443b      	add	r3, r7
 80025e2:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80025e6:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d00d      	beq.n	800260e <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80025f2:	4a37      	ldr	r2, [pc, #220]	; (80026d0 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80025f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f6:	fbb2 f2f3 	udiv	r2, r2, r3
 80025fa:	6a3b      	ldr	r3, [r7, #32]
 80025fc:	fb02 f303 	mul.w	r3, r2, r3
 8002600:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002602:	e004      	b.n	800260e <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002604:	6a3b      	ldr	r3, [r7, #32]
 8002606:	4a33      	ldr	r2, [pc, #204]	; (80026d4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002608:	fb02 f303 	mul.w	r3, r2, r3
 800260c:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800260e:	4b2f      	ldr	r3, [pc, #188]	; (80026cc <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002616:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800261a:	d102      	bne.n	8002622 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 800261c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800261e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002620:	e04a      	b.n	80026b8 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 8002622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002624:	005b      	lsls	r3, r3, #1
 8002626:	4a2c      	ldr	r2, [pc, #176]	; (80026d8 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8002628:	fba2 2303 	umull	r2, r3, r2, r3
 800262c:	085b      	lsrs	r3, r3, #1
 800262e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002630:	e042      	b.n	80026b8 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 8002632:	4b26      	ldr	r3, [pc, #152]	; (80026cc <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002634:	6a1b      	ldr	r3, [r3, #32]
 8002636:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800263e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002642:	d108      	bne.n	8002656 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	f003 0302 	and.w	r3, r3, #2
 800264a:	2b00      	cmp	r3, #0
 800264c:	d003      	beq.n	8002656 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 800264e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002652:	62bb      	str	r3, [r7, #40]	; 0x28
 8002654:	e01f      	b.n	8002696 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800265c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002660:	d109      	bne.n	8002676 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8002662:	4b1a      	ldr	r3, [pc, #104]	; (80026cc <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002666:	f003 0302 	and.w	r3, r3, #2
 800266a:	2b00      	cmp	r3, #0
 800266c:	d003      	beq.n	8002676 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 800266e:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002672:	62bb      	str	r3, [r7, #40]	; 0x28
 8002674:	e00f      	b.n	8002696 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800267c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002680:	d11c      	bne.n	80026bc <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8002682:	4b12      	ldr	r3, [pc, #72]	; (80026cc <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d016      	beq.n	80026bc <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 800268e:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002692:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002694:	e012      	b.n	80026bc <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8002696:	e011      	b.n	80026bc <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002698:	f7ff fe78 	bl	800238c <HAL_RCC_GetPCLK2Freq>
 800269c:	4602      	mov	r2, r0
 800269e:	4b0b      	ldr	r3, [pc, #44]	; (80026cc <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	0b9b      	lsrs	r3, r3, #14
 80026a4:	f003 0303 	and.w	r3, r3, #3
 80026a8:	3301      	adds	r3, #1
 80026aa:	005b      	lsls	r3, r3, #1
 80026ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80026b0:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80026b2:	e004      	b.n	80026be <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 80026b4:	bf00      	nop
 80026b6:	e002      	b.n	80026be <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 80026b8:	bf00      	nop
 80026ba:	e000      	b.n	80026be <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 80026bc:	bf00      	nop
    }
  }
  return (frequency);
 80026be:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3734      	adds	r7, #52	; 0x34
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd90      	pop	{r4, r7, pc}
 80026c8:	08003070 	.word	0x08003070
 80026cc:	40021000 	.word	0x40021000
 80026d0:	007a1200 	.word	0x007a1200
 80026d4:	003d0900 	.word	0x003d0900
 80026d8:	aaaaaaab 	.word	0xaaaaaaab

080026dc <__errno>:
 80026dc:	4b01      	ldr	r3, [pc, #4]	; (80026e4 <__errno+0x8>)
 80026de:	6818      	ldr	r0, [r3, #0]
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop
 80026e4:	2000000c 	.word	0x2000000c

080026e8 <__libc_init_array>:
 80026e8:	b570      	push	{r4, r5, r6, lr}
 80026ea:	2600      	movs	r6, #0
 80026ec:	4d0c      	ldr	r5, [pc, #48]	; (8002720 <__libc_init_array+0x38>)
 80026ee:	4c0d      	ldr	r4, [pc, #52]	; (8002724 <__libc_init_array+0x3c>)
 80026f0:	1b64      	subs	r4, r4, r5
 80026f2:	10a4      	asrs	r4, r4, #2
 80026f4:	42a6      	cmp	r6, r4
 80026f6:	d109      	bne.n	800270c <__libc_init_array+0x24>
 80026f8:	f000 fc9c 	bl	8003034 <_init>
 80026fc:	2600      	movs	r6, #0
 80026fe:	4d0a      	ldr	r5, [pc, #40]	; (8002728 <__libc_init_array+0x40>)
 8002700:	4c0a      	ldr	r4, [pc, #40]	; (800272c <__libc_init_array+0x44>)
 8002702:	1b64      	subs	r4, r4, r5
 8002704:	10a4      	asrs	r4, r4, #2
 8002706:	42a6      	cmp	r6, r4
 8002708:	d105      	bne.n	8002716 <__libc_init_array+0x2e>
 800270a:	bd70      	pop	{r4, r5, r6, pc}
 800270c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002710:	4798      	blx	r3
 8002712:	3601      	adds	r6, #1
 8002714:	e7ee      	b.n	80026f4 <__libc_init_array+0xc>
 8002716:	f855 3b04 	ldr.w	r3, [r5], #4
 800271a:	4798      	blx	r3
 800271c:	3601      	adds	r6, #1
 800271e:	e7f2      	b.n	8002706 <__libc_init_array+0x1e>
 8002720:	080030cc 	.word	0x080030cc
 8002724:	080030cc 	.word	0x080030cc
 8002728:	080030cc 	.word	0x080030cc
 800272c:	080030d0 	.word	0x080030d0

08002730 <memset>:
 8002730:	4603      	mov	r3, r0
 8002732:	4402      	add	r2, r0
 8002734:	4293      	cmp	r3, r2
 8002736:	d100      	bne.n	800273a <memset+0xa>
 8002738:	4770      	bx	lr
 800273a:	f803 1b01 	strb.w	r1, [r3], #1
 800273e:	e7f9      	b.n	8002734 <memset+0x4>

08002740 <siprintf>:
 8002740:	b40e      	push	{r1, r2, r3}
 8002742:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002746:	b500      	push	{lr}
 8002748:	b09c      	sub	sp, #112	; 0x70
 800274a:	ab1d      	add	r3, sp, #116	; 0x74
 800274c:	9002      	str	r0, [sp, #8]
 800274e:	9006      	str	r0, [sp, #24]
 8002750:	9107      	str	r1, [sp, #28]
 8002752:	9104      	str	r1, [sp, #16]
 8002754:	4808      	ldr	r0, [pc, #32]	; (8002778 <siprintf+0x38>)
 8002756:	4909      	ldr	r1, [pc, #36]	; (800277c <siprintf+0x3c>)
 8002758:	f853 2b04 	ldr.w	r2, [r3], #4
 800275c:	9105      	str	r1, [sp, #20]
 800275e:	6800      	ldr	r0, [r0, #0]
 8002760:	a902      	add	r1, sp, #8
 8002762:	9301      	str	r3, [sp, #4]
 8002764:	f000 f868 	bl	8002838 <_svfiprintf_r>
 8002768:	2200      	movs	r2, #0
 800276a:	9b02      	ldr	r3, [sp, #8]
 800276c:	701a      	strb	r2, [r3, #0]
 800276e:	b01c      	add	sp, #112	; 0x70
 8002770:	f85d eb04 	ldr.w	lr, [sp], #4
 8002774:	b003      	add	sp, #12
 8002776:	4770      	bx	lr
 8002778:	2000000c 	.word	0x2000000c
 800277c:	ffff0208 	.word	0xffff0208

08002780 <__ssputs_r>:
 8002780:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002784:	688e      	ldr	r6, [r1, #8]
 8002786:	4682      	mov	sl, r0
 8002788:	429e      	cmp	r6, r3
 800278a:	460c      	mov	r4, r1
 800278c:	4690      	mov	r8, r2
 800278e:	461f      	mov	r7, r3
 8002790:	d838      	bhi.n	8002804 <__ssputs_r+0x84>
 8002792:	898a      	ldrh	r2, [r1, #12]
 8002794:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002798:	d032      	beq.n	8002800 <__ssputs_r+0x80>
 800279a:	6825      	ldr	r5, [r4, #0]
 800279c:	6909      	ldr	r1, [r1, #16]
 800279e:	3301      	adds	r3, #1
 80027a0:	eba5 0901 	sub.w	r9, r5, r1
 80027a4:	6965      	ldr	r5, [r4, #20]
 80027a6:	444b      	add	r3, r9
 80027a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80027ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80027b0:	106d      	asrs	r5, r5, #1
 80027b2:	429d      	cmp	r5, r3
 80027b4:	bf38      	it	cc
 80027b6:	461d      	movcc	r5, r3
 80027b8:	0553      	lsls	r3, r2, #21
 80027ba:	d531      	bpl.n	8002820 <__ssputs_r+0xa0>
 80027bc:	4629      	mov	r1, r5
 80027be:	f000 fb6f 	bl	8002ea0 <_malloc_r>
 80027c2:	4606      	mov	r6, r0
 80027c4:	b950      	cbnz	r0, 80027dc <__ssputs_r+0x5c>
 80027c6:	230c      	movs	r3, #12
 80027c8:	f04f 30ff 	mov.w	r0, #4294967295
 80027cc:	f8ca 3000 	str.w	r3, [sl]
 80027d0:	89a3      	ldrh	r3, [r4, #12]
 80027d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027d6:	81a3      	strh	r3, [r4, #12]
 80027d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80027dc:	464a      	mov	r2, r9
 80027de:	6921      	ldr	r1, [r4, #16]
 80027e0:	f000 face 	bl	8002d80 <memcpy>
 80027e4:	89a3      	ldrh	r3, [r4, #12]
 80027e6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80027ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027ee:	81a3      	strh	r3, [r4, #12]
 80027f0:	6126      	str	r6, [r4, #16]
 80027f2:	444e      	add	r6, r9
 80027f4:	6026      	str	r6, [r4, #0]
 80027f6:	463e      	mov	r6, r7
 80027f8:	6165      	str	r5, [r4, #20]
 80027fa:	eba5 0509 	sub.w	r5, r5, r9
 80027fe:	60a5      	str	r5, [r4, #8]
 8002800:	42be      	cmp	r6, r7
 8002802:	d900      	bls.n	8002806 <__ssputs_r+0x86>
 8002804:	463e      	mov	r6, r7
 8002806:	4632      	mov	r2, r6
 8002808:	4641      	mov	r1, r8
 800280a:	6820      	ldr	r0, [r4, #0]
 800280c:	f000 fac6 	bl	8002d9c <memmove>
 8002810:	68a3      	ldr	r3, [r4, #8]
 8002812:	2000      	movs	r0, #0
 8002814:	1b9b      	subs	r3, r3, r6
 8002816:	60a3      	str	r3, [r4, #8]
 8002818:	6823      	ldr	r3, [r4, #0]
 800281a:	4433      	add	r3, r6
 800281c:	6023      	str	r3, [r4, #0]
 800281e:	e7db      	b.n	80027d8 <__ssputs_r+0x58>
 8002820:	462a      	mov	r2, r5
 8002822:	f000 fbb1 	bl	8002f88 <_realloc_r>
 8002826:	4606      	mov	r6, r0
 8002828:	2800      	cmp	r0, #0
 800282a:	d1e1      	bne.n	80027f0 <__ssputs_r+0x70>
 800282c:	4650      	mov	r0, sl
 800282e:	6921      	ldr	r1, [r4, #16]
 8002830:	f000 face 	bl	8002dd0 <_free_r>
 8002834:	e7c7      	b.n	80027c6 <__ssputs_r+0x46>
	...

08002838 <_svfiprintf_r>:
 8002838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800283c:	4698      	mov	r8, r3
 800283e:	898b      	ldrh	r3, [r1, #12]
 8002840:	4607      	mov	r7, r0
 8002842:	061b      	lsls	r3, r3, #24
 8002844:	460d      	mov	r5, r1
 8002846:	4614      	mov	r4, r2
 8002848:	b09d      	sub	sp, #116	; 0x74
 800284a:	d50e      	bpl.n	800286a <_svfiprintf_r+0x32>
 800284c:	690b      	ldr	r3, [r1, #16]
 800284e:	b963      	cbnz	r3, 800286a <_svfiprintf_r+0x32>
 8002850:	2140      	movs	r1, #64	; 0x40
 8002852:	f000 fb25 	bl	8002ea0 <_malloc_r>
 8002856:	6028      	str	r0, [r5, #0]
 8002858:	6128      	str	r0, [r5, #16]
 800285a:	b920      	cbnz	r0, 8002866 <_svfiprintf_r+0x2e>
 800285c:	230c      	movs	r3, #12
 800285e:	603b      	str	r3, [r7, #0]
 8002860:	f04f 30ff 	mov.w	r0, #4294967295
 8002864:	e0d1      	b.n	8002a0a <_svfiprintf_r+0x1d2>
 8002866:	2340      	movs	r3, #64	; 0x40
 8002868:	616b      	str	r3, [r5, #20]
 800286a:	2300      	movs	r3, #0
 800286c:	9309      	str	r3, [sp, #36]	; 0x24
 800286e:	2320      	movs	r3, #32
 8002870:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002874:	2330      	movs	r3, #48	; 0x30
 8002876:	f04f 0901 	mov.w	r9, #1
 800287a:	f8cd 800c 	str.w	r8, [sp, #12]
 800287e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002a24 <_svfiprintf_r+0x1ec>
 8002882:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002886:	4623      	mov	r3, r4
 8002888:	469a      	mov	sl, r3
 800288a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800288e:	b10a      	cbz	r2, 8002894 <_svfiprintf_r+0x5c>
 8002890:	2a25      	cmp	r2, #37	; 0x25
 8002892:	d1f9      	bne.n	8002888 <_svfiprintf_r+0x50>
 8002894:	ebba 0b04 	subs.w	fp, sl, r4
 8002898:	d00b      	beq.n	80028b2 <_svfiprintf_r+0x7a>
 800289a:	465b      	mov	r3, fp
 800289c:	4622      	mov	r2, r4
 800289e:	4629      	mov	r1, r5
 80028a0:	4638      	mov	r0, r7
 80028a2:	f7ff ff6d 	bl	8002780 <__ssputs_r>
 80028a6:	3001      	adds	r0, #1
 80028a8:	f000 80aa 	beq.w	8002a00 <_svfiprintf_r+0x1c8>
 80028ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80028ae:	445a      	add	r2, fp
 80028b0:	9209      	str	r2, [sp, #36]	; 0x24
 80028b2:	f89a 3000 	ldrb.w	r3, [sl]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	f000 80a2 	beq.w	8002a00 <_svfiprintf_r+0x1c8>
 80028bc:	2300      	movs	r3, #0
 80028be:	f04f 32ff 	mov.w	r2, #4294967295
 80028c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80028c6:	f10a 0a01 	add.w	sl, sl, #1
 80028ca:	9304      	str	r3, [sp, #16]
 80028cc:	9307      	str	r3, [sp, #28]
 80028ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80028d2:	931a      	str	r3, [sp, #104]	; 0x68
 80028d4:	4654      	mov	r4, sl
 80028d6:	2205      	movs	r2, #5
 80028d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80028dc:	4851      	ldr	r0, [pc, #324]	; (8002a24 <_svfiprintf_r+0x1ec>)
 80028de:	f000 fa41 	bl	8002d64 <memchr>
 80028e2:	9a04      	ldr	r2, [sp, #16]
 80028e4:	b9d8      	cbnz	r0, 800291e <_svfiprintf_r+0xe6>
 80028e6:	06d0      	lsls	r0, r2, #27
 80028e8:	bf44      	itt	mi
 80028ea:	2320      	movmi	r3, #32
 80028ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80028f0:	0711      	lsls	r1, r2, #28
 80028f2:	bf44      	itt	mi
 80028f4:	232b      	movmi	r3, #43	; 0x2b
 80028f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80028fa:	f89a 3000 	ldrb.w	r3, [sl]
 80028fe:	2b2a      	cmp	r3, #42	; 0x2a
 8002900:	d015      	beq.n	800292e <_svfiprintf_r+0xf6>
 8002902:	4654      	mov	r4, sl
 8002904:	2000      	movs	r0, #0
 8002906:	f04f 0c0a 	mov.w	ip, #10
 800290a:	9a07      	ldr	r2, [sp, #28]
 800290c:	4621      	mov	r1, r4
 800290e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002912:	3b30      	subs	r3, #48	; 0x30
 8002914:	2b09      	cmp	r3, #9
 8002916:	d94e      	bls.n	80029b6 <_svfiprintf_r+0x17e>
 8002918:	b1b0      	cbz	r0, 8002948 <_svfiprintf_r+0x110>
 800291a:	9207      	str	r2, [sp, #28]
 800291c:	e014      	b.n	8002948 <_svfiprintf_r+0x110>
 800291e:	eba0 0308 	sub.w	r3, r0, r8
 8002922:	fa09 f303 	lsl.w	r3, r9, r3
 8002926:	4313      	orrs	r3, r2
 8002928:	46a2      	mov	sl, r4
 800292a:	9304      	str	r3, [sp, #16]
 800292c:	e7d2      	b.n	80028d4 <_svfiprintf_r+0x9c>
 800292e:	9b03      	ldr	r3, [sp, #12]
 8002930:	1d19      	adds	r1, r3, #4
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	9103      	str	r1, [sp, #12]
 8002936:	2b00      	cmp	r3, #0
 8002938:	bfbb      	ittet	lt
 800293a:	425b      	neglt	r3, r3
 800293c:	f042 0202 	orrlt.w	r2, r2, #2
 8002940:	9307      	strge	r3, [sp, #28]
 8002942:	9307      	strlt	r3, [sp, #28]
 8002944:	bfb8      	it	lt
 8002946:	9204      	strlt	r2, [sp, #16]
 8002948:	7823      	ldrb	r3, [r4, #0]
 800294a:	2b2e      	cmp	r3, #46	; 0x2e
 800294c:	d10c      	bne.n	8002968 <_svfiprintf_r+0x130>
 800294e:	7863      	ldrb	r3, [r4, #1]
 8002950:	2b2a      	cmp	r3, #42	; 0x2a
 8002952:	d135      	bne.n	80029c0 <_svfiprintf_r+0x188>
 8002954:	9b03      	ldr	r3, [sp, #12]
 8002956:	3402      	adds	r4, #2
 8002958:	1d1a      	adds	r2, r3, #4
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	9203      	str	r2, [sp, #12]
 800295e:	2b00      	cmp	r3, #0
 8002960:	bfb8      	it	lt
 8002962:	f04f 33ff 	movlt.w	r3, #4294967295
 8002966:	9305      	str	r3, [sp, #20]
 8002968:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8002a28 <_svfiprintf_r+0x1f0>
 800296c:	2203      	movs	r2, #3
 800296e:	4650      	mov	r0, sl
 8002970:	7821      	ldrb	r1, [r4, #0]
 8002972:	f000 f9f7 	bl	8002d64 <memchr>
 8002976:	b140      	cbz	r0, 800298a <_svfiprintf_r+0x152>
 8002978:	2340      	movs	r3, #64	; 0x40
 800297a:	eba0 000a 	sub.w	r0, r0, sl
 800297e:	fa03 f000 	lsl.w	r0, r3, r0
 8002982:	9b04      	ldr	r3, [sp, #16]
 8002984:	3401      	adds	r4, #1
 8002986:	4303      	orrs	r3, r0
 8002988:	9304      	str	r3, [sp, #16]
 800298a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800298e:	2206      	movs	r2, #6
 8002990:	4826      	ldr	r0, [pc, #152]	; (8002a2c <_svfiprintf_r+0x1f4>)
 8002992:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002996:	f000 f9e5 	bl	8002d64 <memchr>
 800299a:	2800      	cmp	r0, #0
 800299c:	d038      	beq.n	8002a10 <_svfiprintf_r+0x1d8>
 800299e:	4b24      	ldr	r3, [pc, #144]	; (8002a30 <_svfiprintf_r+0x1f8>)
 80029a0:	bb1b      	cbnz	r3, 80029ea <_svfiprintf_r+0x1b2>
 80029a2:	9b03      	ldr	r3, [sp, #12]
 80029a4:	3307      	adds	r3, #7
 80029a6:	f023 0307 	bic.w	r3, r3, #7
 80029aa:	3308      	adds	r3, #8
 80029ac:	9303      	str	r3, [sp, #12]
 80029ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80029b0:	4433      	add	r3, r6
 80029b2:	9309      	str	r3, [sp, #36]	; 0x24
 80029b4:	e767      	b.n	8002886 <_svfiprintf_r+0x4e>
 80029b6:	460c      	mov	r4, r1
 80029b8:	2001      	movs	r0, #1
 80029ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80029be:	e7a5      	b.n	800290c <_svfiprintf_r+0xd4>
 80029c0:	2300      	movs	r3, #0
 80029c2:	f04f 0c0a 	mov.w	ip, #10
 80029c6:	4619      	mov	r1, r3
 80029c8:	3401      	adds	r4, #1
 80029ca:	9305      	str	r3, [sp, #20]
 80029cc:	4620      	mov	r0, r4
 80029ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80029d2:	3a30      	subs	r2, #48	; 0x30
 80029d4:	2a09      	cmp	r2, #9
 80029d6:	d903      	bls.n	80029e0 <_svfiprintf_r+0x1a8>
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d0c5      	beq.n	8002968 <_svfiprintf_r+0x130>
 80029dc:	9105      	str	r1, [sp, #20]
 80029de:	e7c3      	b.n	8002968 <_svfiprintf_r+0x130>
 80029e0:	4604      	mov	r4, r0
 80029e2:	2301      	movs	r3, #1
 80029e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80029e8:	e7f0      	b.n	80029cc <_svfiprintf_r+0x194>
 80029ea:	ab03      	add	r3, sp, #12
 80029ec:	9300      	str	r3, [sp, #0]
 80029ee:	462a      	mov	r2, r5
 80029f0:	4638      	mov	r0, r7
 80029f2:	4b10      	ldr	r3, [pc, #64]	; (8002a34 <_svfiprintf_r+0x1fc>)
 80029f4:	a904      	add	r1, sp, #16
 80029f6:	f3af 8000 	nop.w
 80029fa:	1c42      	adds	r2, r0, #1
 80029fc:	4606      	mov	r6, r0
 80029fe:	d1d6      	bne.n	80029ae <_svfiprintf_r+0x176>
 8002a00:	89ab      	ldrh	r3, [r5, #12]
 8002a02:	065b      	lsls	r3, r3, #25
 8002a04:	f53f af2c 	bmi.w	8002860 <_svfiprintf_r+0x28>
 8002a08:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002a0a:	b01d      	add	sp, #116	; 0x74
 8002a0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a10:	ab03      	add	r3, sp, #12
 8002a12:	9300      	str	r3, [sp, #0]
 8002a14:	462a      	mov	r2, r5
 8002a16:	4638      	mov	r0, r7
 8002a18:	4b06      	ldr	r3, [pc, #24]	; (8002a34 <_svfiprintf_r+0x1fc>)
 8002a1a:	a904      	add	r1, sp, #16
 8002a1c:	f000 f87c 	bl	8002b18 <_printf_i>
 8002a20:	e7eb      	b.n	80029fa <_svfiprintf_r+0x1c2>
 8002a22:	bf00      	nop
 8002a24:	08003098 	.word	0x08003098
 8002a28:	0800309e 	.word	0x0800309e
 8002a2c:	080030a2 	.word	0x080030a2
 8002a30:	00000000 	.word	0x00000000
 8002a34:	08002781 	.word	0x08002781

08002a38 <_printf_common>:
 8002a38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a3c:	4616      	mov	r6, r2
 8002a3e:	4699      	mov	r9, r3
 8002a40:	688a      	ldr	r2, [r1, #8]
 8002a42:	690b      	ldr	r3, [r1, #16]
 8002a44:	4607      	mov	r7, r0
 8002a46:	4293      	cmp	r3, r2
 8002a48:	bfb8      	it	lt
 8002a4a:	4613      	movlt	r3, r2
 8002a4c:	6033      	str	r3, [r6, #0]
 8002a4e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002a52:	460c      	mov	r4, r1
 8002a54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002a58:	b10a      	cbz	r2, 8002a5e <_printf_common+0x26>
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	6033      	str	r3, [r6, #0]
 8002a5e:	6823      	ldr	r3, [r4, #0]
 8002a60:	0699      	lsls	r1, r3, #26
 8002a62:	bf42      	ittt	mi
 8002a64:	6833      	ldrmi	r3, [r6, #0]
 8002a66:	3302      	addmi	r3, #2
 8002a68:	6033      	strmi	r3, [r6, #0]
 8002a6a:	6825      	ldr	r5, [r4, #0]
 8002a6c:	f015 0506 	ands.w	r5, r5, #6
 8002a70:	d106      	bne.n	8002a80 <_printf_common+0x48>
 8002a72:	f104 0a19 	add.w	sl, r4, #25
 8002a76:	68e3      	ldr	r3, [r4, #12]
 8002a78:	6832      	ldr	r2, [r6, #0]
 8002a7a:	1a9b      	subs	r3, r3, r2
 8002a7c:	42ab      	cmp	r3, r5
 8002a7e:	dc28      	bgt.n	8002ad2 <_printf_common+0x9a>
 8002a80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002a84:	1e13      	subs	r3, r2, #0
 8002a86:	6822      	ldr	r2, [r4, #0]
 8002a88:	bf18      	it	ne
 8002a8a:	2301      	movne	r3, #1
 8002a8c:	0692      	lsls	r2, r2, #26
 8002a8e:	d42d      	bmi.n	8002aec <_printf_common+0xb4>
 8002a90:	4649      	mov	r1, r9
 8002a92:	4638      	mov	r0, r7
 8002a94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002a98:	47c0      	blx	r8
 8002a9a:	3001      	adds	r0, #1
 8002a9c:	d020      	beq.n	8002ae0 <_printf_common+0xa8>
 8002a9e:	6823      	ldr	r3, [r4, #0]
 8002aa0:	68e5      	ldr	r5, [r4, #12]
 8002aa2:	f003 0306 	and.w	r3, r3, #6
 8002aa6:	2b04      	cmp	r3, #4
 8002aa8:	bf18      	it	ne
 8002aaa:	2500      	movne	r5, #0
 8002aac:	6832      	ldr	r2, [r6, #0]
 8002aae:	f04f 0600 	mov.w	r6, #0
 8002ab2:	68a3      	ldr	r3, [r4, #8]
 8002ab4:	bf08      	it	eq
 8002ab6:	1aad      	subeq	r5, r5, r2
 8002ab8:	6922      	ldr	r2, [r4, #16]
 8002aba:	bf08      	it	eq
 8002abc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	bfc4      	itt	gt
 8002ac4:	1a9b      	subgt	r3, r3, r2
 8002ac6:	18ed      	addgt	r5, r5, r3
 8002ac8:	341a      	adds	r4, #26
 8002aca:	42b5      	cmp	r5, r6
 8002acc:	d11a      	bne.n	8002b04 <_printf_common+0xcc>
 8002ace:	2000      	movs	r0, #0
 8002ad0:	e008      	b.n	8002ae4 <_printf_common+0xac>
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	4652      	mov	r2, sl
 8002ad6:	4649      	mov	r1, r9
 8002ad8:	4638      	mov	r0, r7
 8002ada:	47c0      	blx	r8
 8002adc:	3001      	adds	r0, #1
 8002ade:	d103      	bne.n	8002ae8 <_printf_common+0xb0>
 8002ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ae4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ae8:	3501      	adds	r5, #1
 8002aea:	e7c4      	b.n	8002a76 <_printf_common+0x3e>
 8002aec:	2030      	movs	r0, #48	; 0x30
 8002aee:	18e1      	adds	r1, r4, r3
 8002af0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002af4:	1c5a      	adds	r2, r3, #1
 8002af6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002afa:	4422      	add	r2, r4
 8002afc:	3302      	adds	r3, #2
 8002afe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002b02:	e7c5      	b.n	8002a90 <_printf_common+0x58>
 8002b04:	2301      	movs	r3, #1
 8002b06:	4622      	mov	r2, r4
 8002b08:	4649      	mov	r1, r9
 8002b0a:	4638      	mov	r0, r7
 8002b0c:	47c0      	blx	r8
 8002b0e:	3001      	adds	r0, #1
 8002b10:	d0e6      	beq.n	8002ae0 <_printf_common+0xa8>
 8002b12:	3601      	adds	r6, #1
 8002b14:	e7d9      	b.n	8002aca <_printf_common+0x92>
	...

08002b18 <_printf_i>:
 8002b18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002b1c:	7e0f      	ldrb	r7, [r1, #24]
 8002b1e:	4691      	mov	r9, r2
 8002b20:	2f78      	cmp	r7, #120	; 0x78
 8002b22:	4680      	mov	r8, r0
 8002b24:	460c      	mov	r4, r1
 8002b26:	469a      	mov	sl, r3
 8002b28:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002b2a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002b2e:	d807      	bhi.n	8002b40 <_printf_i+0x28>
 8002b30:	2f62      	cmp	r7, #98	; 0x62
 8002b32:	d80a      	bhi.n	8002b4a <_printf_i+0x32>
 8002b34:	2f00      	cmp	r7, #0
 8002b36:	f000 80d9 	beq.w	8002cec <_printf_i+0x1d4>
 8002b3a:	2f58      	cmp	r7, #88	; 0x58
 8002b3c:	f000 80a4 	beq.w	8002c88 <_printf_i+0x170>
 8002b40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002b44:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002b48:	e03a      	b.n	8002bc0 <_printf_i+0xa8>
 8002b4a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002b4e:	2b15      	cmp	r3, #21
 8002b50:	d8f6      	bhi.n	8002b40 <_printf_i+0x28>
 8002b52:	a101      	add	r1, pc, #4	; (adr r1, 8002b58 <_printf_i+0x40>)
 8002b54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002b58:	08002bb1 	.word	0x08002bb1
 8002b5c:	08002bc5 	.word	0x08002bc5
 8002b60:	08002b41 	.word	0x08002b41
 8002b64:	08002b41 	.word	0x08002b41
 8002b68:	08002b41 	.word	0x08002b41
 8002b6c:	08002b41 	.word	0x08002b41
 8002b70:	08002bc5 	.word	0x08002bc5
 8002b74:	08002b41 	.word	0x08002b41
 8002b78:	08002b41 	.word	0x08002b41
 8002b7c:	08002b41 	.word	0x08002b41
 8002b80:	08002b41 	.word	0x08002b41
 8002b84:	08002cd3 	.word	0x08002cd3
 8002b88:	08002bf5 	.word	0x08002bf5
 8002b8c:	08002cb5 	.word	0x08002cb5
 8002b90:	08002b41 	.word	0x08002b41
 8002b94:	08002b41 	.word	0x08002b41
 8002b98:	08002cf5 	.word	0x08002cf5
 8002b9c:	08002b41 	.word	0x08002b41
 8002ba0:	08002bf5 	.word	0x08002bf5
 8002ba4:	08002b41 	.word	0x08002b41
 8002ba8:	08002b41 	.word	0x08002b41
 8002bac:	08002cbd 	.word	0x08002cbd
 8002bb0:	682b      	ldr	r3, [r5, #0]
 8002bb2:	1d1a      	adds	r2, r3, #4
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	602a      	str	r2, [r5, #0]
 8002bb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002bbc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e0a4      	b.n	8002d0e <_printf_i+0x1f6>
 8002bc4:	6820      	ldr	r0, [r4, #0]
 8002bc6:	6829      	ldr	r1, [r5, #0]
 8002bc8:	0606      	lsls	r6, r0, #24
 8002bca:	f101 0304 	add.w	r3, r1, #4
 8002bce:	d50a      	bpl.n	8002be6 <_printf_i+0xce>
 8002bd0:	680e      	ldr	r6, [r1, #0]
 8002bd2:	602b      	str	r3, [r5, #0]
 8002bd4:	2e00      	cmp	r6, #0
 8002bd6:	da03      	bge.n	8002be0 <_printf_i+0xc8>
 8002bd8:	232d      	movs	r3, #45	; 0x2d
 8002bda:	4276      	negs	r6, r6
 8002bdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002be0:	230a      	movs	r3, #10
 8002be2:	485e      	ldr	r0, [pc, #376]	; (8002d5c <_printf_i+0x244>)
 8002be4:	e019      	b.n	8002c1a <_printf_i+0x102>
 8002be6:	680e      	ldr	r6, [r1, #0]
 8002be8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002bec:	602b      	str	r3, [r5, #0]
 8002bee:	bf18      	it	ne
 8002bf0:	b236      	sxthne	r6, r6
 8002bf2:	e7ef      	b.n	8002bd4 <_printf_i+0xbc>
 8002bf4:	682b      	ldr	r3, [r5, #0]
 8002bf6:	6820      	ldr	r0, [r4, #0]
 8002bf8:	1d19      	adds	r1, r3, #4
 8002bfa:	6029      	str	r1, [r5, #0]
 8002bfc:	0601      	lsls	r1, r0, #24
 8002bfe:	d501      	bpl.n	8002c04 <_printf_i+0xec>
 8002c00:	681e      	ldr	r6, [r3, #0]
 8002c02:	e002      	b.n	8002c0a <_printf_i+0xf2>
 8002c04:	0646      	lsls	r6, r0, #25
 8002c06:	d5fb      	bpl.n	8002c00 <_printf_i+0xe8>
 8002c08:	881e      	ldrh	r6, [r3, #0]
 8002c0a:	2f6f      	cmp	r7, #111	; 0x6f
 8002c0c:	bf0c      	ite	eq
 8002c0e:	2308      	moveq	r3, #8
 8002c10:	230a      	movne	r3, #10
 8002c12:	4852      	ldr	r0, [pc, #328]	; (8002d5c <_printf_i+0x244>)
 8002c14:	2100      	movs	r1, #0
 8002c16:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002c1a:	6865      	ldr	r5, [r4, #4]
 8002c1c:	2d00      	cmp	r5, #0
 8002c1e:	bfa8      	it	ge
 8002c20:	6821      	ldrge	r1, [r4, #0]
 8002c22:	60a5      	str	r5, [r4, #8]
 8002c24:	bfa4      	itt	ge
 8002c26:	f021 0104 	bicge.w	r1, r1, #4
 8002c2a:	6021      	strge	r1, [r4, #0]
 8002c2c:	b90e      	cbnz	r6, 8002c32 <_printf_i+0x11a>
 8002c2e:	2d00      	cmp	r5, #0
 8002c30:	d04d      	beq.n	8002cce <_printf_i+0x1b6>
 8002c32:	4615      	mov	r5, r2
 8002c34:	fbb6 f1f3 	udiv	r1, r6, r3
 8002c38:	fb03 6711 	mls	r7, r3, r1, r6
 8002c3c:	5dc7      	ldrb	r7, [r0, r7]
 8002c3e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002c42:	4637      	mov	r7, r6
 8002c44:	42bb      	cmp	r3, r7
 8002c46:	460e      	mov	r6, r1
 8002c48:	d9f4      	bls.n	8002c34 <_printf_i+0x11c>
 8002c4a:	2b08      	cmp	r3, #8
 8002c4c:	d10b      	bne.n	8002c66 <_printf_i+0x14e>
 8002c4e:	6823      	ldr	r3, [r4, #0]
 8002c50:	07de      	lsls	r6, r3, #31
 8002c52:	d508      	bpl.n	8002c66 <_printf_i+0x14e>
 8002c54:	6923      	ldr	r3, [r4, #16]
 8002c56:	6861      	ldr	r1, [r4, #4]
 8002c58:	4299      	cmp	r1, r3
 8002c5a:	bfde      	ittt	le
 8002c5c:	2330      	movle	r3, #48	; 0x30
 8002c5e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002c62:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002c66:	1b52      	subs	r2, r2, r5
 8002c68:	6122      	str	r2, [r4, #16]
 8002c6a:	464b      	mov	r3, r9
 8002c6c:	4621      	mov	r1, r4
 8002c6e:	4640      	mov	r0, r8
 8002c70:	f8cd a000 	str.w	sl, [sp]
 8002c74:	aa03      	add	r2, sp, #12
 8002c76:	f7ff fedf 	bl	8002a38 <_printf_common>
 8002c7a:	3001      	adds	r0, #1
 8002c7c:	d14c      	bne.n	8002d18 <_printf_i+0x200>
 8002c7e:	f04f 30ff 	mov.w	r0, #4294967295
 8002c82:	b004      	add	sp, #16
 8002c84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c88:	4834      	ldr	r0, [pc, #208]	; (8002d5c <_printf_i+0x244>)
 8002c8a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002c8e:	6829      	ldr	r1, [r5, #0]
 8002c90:	6823      	ldr	r3, [r4, #0]
 8002c92:	f851 6b04 	ldr.w	r6, [r1], #4
 8002c96:	6029      	str	r1, [r5, #0]
 8002c98:	061d      	lsls	r5, r3, #24
 8002c9a:	d514      	bpl.n	8002cc6 <_printf_i+0x1ae>
 8002c9c:	07df      	lsls	r7, r3, #31
 8002c9e:	bf44      	itt	mi
 8002ca0:	f043 0320 	orrmi.w	r3, r3, #32
 8002ca4:	6023      	strmi	r3, [r4, #0]
 8002ca6:	b91e      	cbnz	r6, 8002cb0 <_printf_i+0x198>
 8002ca8:	6823      	ldr	r3, [r4, #0]
 8002caa:	f023 0320 	bic.w	r3, r3, #32
 8002cae:	6023      	str	r3, [r4, #0]
 8002cb0:	2310      	movs	r3, #16
 8002cb2:	e7af      	b.n	8002c14 <_printf_i+0xfc>
 8002cb4:	6823      	ldr	r3, [r4, #0]
 8002cb6:	f043 0320 	orr.w	r3, r3, #32
 8002cba:	6023      	str	r3, [r4, #0]
 8002cbc:	2378      	movs	r3, #120	; 0x78
 8002cbe:	4828      	ldr	r0, [pc, #160]	; (8002d60 <_printf_i+0x248>)
 8002cc0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002cc4:	e7e3      	b.n	8002c8e <_printf_i+0x176>
 8002cc6:	0659      	lsls	r1, r3, #25
 8002cc8:	bf48      	it	mi
 8002cca:	b2b6      	uxthmi	r6, r6
 8002ccc:	e7e6      	b.n	8002c9c <_printf_i+0x184>
 8002cce:	4615      	mov	r5, r2
 8002cd0:	e7bb      	b.n	8002c4a <_printf_i+0x132>
 8002cd2:	682b      	ldr	r3, [r5, #0]
 8002cd4:	6826      	ldr	r6, [r4, #0]
 8002cd6:	1d18      	adds	r0, r3, #4
 8002cd8:	6961      	ldr	r1, [r4, #20]
 8002cda:	6028      	str	r0, [r5, #0]
 8002cdc:	0635      	lsls	r5, r6, #24
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	d501      	bpl.n	8002ce6 <_printf_i+0x1ce>
 8002ce2:	6019      	str	r1, [r3, #0]
 8002ce4:	e002      	b.n	8002cec <_printf_i+0x1d4>
 8002ce6:	0670      	lsls	r0, r6, #25
 8002ce8:	d5fb      	bpl.n	8002ce2 <_printf_i+0x1ca>
 8002cea:	8019      	strh	r1, [r3, #0]
 8002cec:	2300      	movs	r3, #0
 8002cee:	4615      	mov	r5, r2
 8002cf0:	6123      	str	r3, [r4, #16]
 8002cf2:	e7ba      	b.n	8002c6a <_printf_i+0x152>
 8002cf4:	682b      	ldr	r3, [r5, #0]
 8002cf6:	2100      	movs	r1, #0
 8002cf8:	1d1a      	adds	r2, r3, #4
 8002cfa:	602a      	str	r2, [r5, #0]
 8002cfc:	681d      	ldr	r5, [r3, #0]
 8002cfe:	6862      	ldr	r2, [r4, #4]
 8002d00:	4628      	mov	r0, r5
 8002d02:	f000 f82f 	bl	8002d64 <memchr>
 8002d06:	b108      	cbz	r0, 8002d0c <_printf_i+0x1f4>
 8002d08:	1b40      	subs	r0, r0, r5
 8002d0a:	6060      	str	r0, [r4, #4]
 8002d0c:	6863      	ldr	r3, [r4, #4]
 8002d0e:	6123      	str	r3, [r4, #16]
 8002d10:	2300      	movs	r3, #0
 8002d12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002d16:	e7a8      	b.n	8002c6a <_printf_i+0x152>
 8002d18:	462a      	mov	r2, r5
 8002d1a:	4649      	mov	r1, r9
 8002d1c:	4640      	mov	r0, r8
 8002d1e:	6923      	ldr	r3, [r4, #16]
 8002d20:	47d0      	blx	sl
 8002d22:	3001      	adds	r0, #1
 8002d24:	d0ab      	beq.n	8002c7e <_printf_i+0x166>
 8002d26:	6823      	ldr	r3, [r4, #0]
 8002d28:	079b      	lsls	r3, r3, #30
 8002d2a:	d413      	bmi.n	8002d54 <_printf_i+0x23c>
 8002d2c:	68e0      	ldr	r0, [r4, #12]
 8002d2e:	9b03      	ldr	r3, [sp, #12]
 8002d30:	4298      	cmp	r0, r3
 8002d32:	bfb8      	it	lt
 8002d34:	4618      	movlt	r0, r3
 8002d36:	e7a4      	b.n	8002c82 <_printf_i+0x16a>
 8002d38:	2301      	movs	r3, #1
 8002d3a:	4632      	mov	r2, r6
 8002d3c:	4649      	mov	r1, r9
 8002d3e:	4640      	mov	r0, r8
 8002d40:	47d0      	blx	sl
 8002d42:	3001      	adds	r0, #1
 8002d44:	d09b      	beq.n	8002c7e <_printf_i+0x166>
 8002d46:	3501      	adds	r5, #1
 8002d48:	68e3      	ldr	r3, [r4, #12]
 8002d4a:	9903      	ldr	r1, [sp, #12]
 8002d4c:	1a5b      	subs	r3, r3, r1
 8002d4e:	42ab      	cmp	r3, r5
 8002d50:	dcf2      	bgt.n	8002d38 <_printf_i+0x220>
 8002d52:	e7eb      	b.n	8002d2c <_printf_i+0x214>
 8002d54:	2500      	movs	r5, #0
 8002d56:	f104 0619 	add.w	r6, r4, #25
 8002d5a:	e7f5      	b.n	8002d48 <_printf_i+0x230>
 8002d5c:	080030a9 	.word	0x080030a9
 8002d60:	080030ba 	.word	0x080030ba

08002d64 <memchr>:
 8002d64:	4603      	mov	r3, r0
 8002d66:	b510      	push	{r4, lr}
 8002d68:	b2c9      	uxtb	r1, r1
 8002d6a:	4402      	add	r2, r0
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	4618      	mov	r0, r3
 8002d70:	d101      	bne.n	8002d76 <memchr+0x12>
 8002d72:	2000      	movs	r0, #0
 8002d74:	e003      	b.n	8002d7e <memchr+0x1a>
 8002d76:	7804      	ldrb	r4, [r0, #0]
 8002d78:	3301      	adds	r3, #1
 8002d7a:	428c      	cmp	r4, r1
 8002d7c:	d1f6      	bne.n	8002d6c <memchr+0x8>
 8002d7e:	bd10      	pop	{r4, pc}

08002d80 <memcpy>:
 8002d80:	440a      	add	r2, r1
 8002d82:	4291      	cmp	r1, r2
 8002d84:	f100 33ff 	add.w	r3, r0, #4294967295
 8002d88:	d100      	bne.n	8002d8c <memcpy+0xc>
 8002d8a:	4770      	bx	lr
 8002d8c:	b510      	push	{r4, lr}
 8002d8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002d92:	4291      	cmp	r1, r2
 8002d94:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002d98:	d1f9      	bne.n	8002d8e <memcpy+0xe>
 8002d9a:	bd10      	pop	{r4, pc}

08002d9c <memmove>:
 8002d9c:	4288      	cmp	r0, r1
 8002d9e:	b510      	push	{r4, lr}
 8002da0:	eb01 0402 	add.w	r4, r1, r2
 8002da4:	d902      	bls.n	8002dac <memmove+0x10>
 8002da6:	4284      	cmp	r4, r0
 8002da8:	4623      	mov	r3, r4
 8002daa:	d807      	bhi.n	8002dbc <memmove+0x20>
 8002dac:	1e43      	subs	r3, r0, #1
 8002dae:	42a1      	cmp	r1, r4
 8002db0:	d008      	beq.n	8002dc4 <memmove+0x28>
 8002db2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002db6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002dba:	e7f8      	b.n	8002dae <memmove+0x12>
 8002dbc:	4601      	mov	r1, r0
 8002dbe:	4402      	add	r2, r0
 8002dc0:	428a      	cmp	r2, r1
 8002dc2:	d100      	bne.n	8002dc6 <memmove+0x2a>
 8002dc4:	bd10      	pop	{r4, pc}
 8002dc6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002dca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002dce:	e7f7      	b.n	8002dc0 <memmove+0x24>

08002dd0 <_free_r>:
 8002dd0:	b538      	push	{r3, r4, r5, lr}
 8002dd2:	4605      	mov	r5, r0
 8002dd4:	2900      	cmp	r1, #0
 8002dd6:	d040      	beq.n	8002e5a <_free_r+0x8a>
 8002dd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002ddc:	1f0c      	subs	r4, r1, #4
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	bfb8      	it	lt
 8002de2:	18e4      	addlt	r4, r4, r3
 8002de4:	f000 f910 	bl	8003008 <__malloc_lock>
 8002de8:	4a1c      	ldr	r2, [pc, #112]	; (8002e5c <_free_r+0x8c>)
 8002dea:	6813      	ldr	r3, [r2, #0]
 8002dec:	b933      	cbnz	r3, 8002dfc <_free_r+0x2c>
 8002dee:	6063      	str	r3, [r4, #4]
 8002df0:	6014      	str	r4, [r2, #0]
 8002df2:	4628      	mov	r0, r5
 8002df4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002df8:	f000 b90c 	b.w	8003014 <__malloc_unlock>
 8002dfc:	42a3      	cmp	r3, r4
 8002dfe:	d908      	bls.n	8002e12 <_free_r+0x42>
 8002e00:	6820      	ldr	r0, [r4, #0]
 8002e02:	1821      	adds	r1, r4, r0
 8002e04:	428b      	cmp	r3, r1
 8002e06:	bf01      	itttt	eq
 8002e08:	6819      	ldreq	r1, [r3, #0]
 8002e0a:	685b      	ldreq	r3, [r3, #4]
 8002e0c:	1809      	addeq	r1, r1, r0
 8002e0e:	6021      	streq	r1, [r4, #0]
 8002e10:	e7ed      	b.n	8002dee <_free_r+0x1e>
 8002e12:	461a      	mov	r2, r3
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	b10b      	cbz	r3, 8002e1c <_free_r+0x4c>
 8002e18:	42a3      	cmp	r3, r4
 8002e1a:	d9fa      	bls.n	8002e12 <_free_r+0x42>
 8002e1c:	6811      	ldr	r1, [r2, #0]
 8002e1e:	1850      	adds	r0, r2, r1
 8002e20:	42a0      	cmp	r0, r4
 8002e22:	d10b      	bne.n	8002e3c <_free_r+0x6c>
 8002e24:	6820      	ldr	r0, [r4, #0]
 8002e26:	4401      	add	r1, r0
 8002e28:	1850      	adds	r0, r2, r1
 8002e2a:	4283      	cmp	r3, r0
 8002e2c:	6011      	str	r1, [r2, #0]
 8002e2e:	d1e0      	bne.n	8002df2 <_free_r+0x22>
 8002e30:	6818      	ldr	r0, [r3, #0]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	4401      	add	r1, r0
 8002e36:	6011      	str	r1, [r2, #0]
 8002e38:	6053      	str	r3, [r2, #4]
 8002e3a:	e7da      	b.n	8002df2 <_free_r+0x22>
 8002e3c:	d902      	bls.n	8002e44 <_free_r+0x74>
 8002e3e:	230c      	movs	r3, #12
 8002e40:	602b      	str	r3, [r5, #0]
 8002e42:	e7d6      	b.n	8002df2 <_free_r+0x22>
 8002e44:	6820      	ldr	r0, [r4, #0]
 8002e46:	1821      	adds	r1, r4, r0
 8002e48:	428b      	cmp	r3, r1
 8002e4a:	bf01      	itttt	eq
 8002e4c:	6819      	ldreq	r1, [r3, #0]
 8002e4e:	685b      	ldreq	r3, [r3, #4]
 8002e50:	1809      	addeq	r1, r1, r0
 8002e52:	6021      	streq	r1, [r4, #0]
 8002e54:	6063      	str	r3, [r4, #4]
 8002e56:	6054      	str	r4, [r2, #4]
 8002e58:	e7cb      	b.n	8002df2 <_free_r+0x22>
 8002e5a:	bd38      	pop	{r3, r4, r5, pc}
 8002e5c:	200000cc 	.word	0x200000cc

08002e60 <sbrk_aligned>:
 8002e60:	b570      	push	{r4, r5, r6, lr}
 8002e62:	4e0e      	ldr	r6, [pc, #56]	; (8002e9c <sbrk_aligned+0x3c>)
 8002e64:	460c      	mov	r4, r1
 8002e66:	6831      	ldr	r1, [r6, #0]
 8002e68:	4605      	mov	r5, r0
 8002e6a:	b911      	cbnz	r1, 8002e72 <sbrk_aligned+0x12>
 8002e6c:	f000 f8bc 	bl	8002fe8 <_sbrk_r>
 8002e70:	6030      	str	r0, [r6, #0]
 8002e72:	4621      	mov	r1, r4
 8002e74:	4628      	mov	r0, r5
 8002e76:	f000 f8b7 	bl	8002fe8 <_sbrk_r>
 8002e7a:	1c43      	adds	r3, r0, #1
 8002e7c:	d00a      	beq.n	8002e94 <sbrk_aligned+0x34>
 8002e7e:	1cc4      	adds	r4, r0, #3
 8002e80:	f024 0403 	bic.w	r4, r4, #3
 8002e84:	42a0      	cmp	r0, r4
 8002e86:	d007      	beq.n	8002e98 <sbrk_aligned+0x38>
 8002e88:	1a21      	subs	r1, r4, r0
 8002e8a:	4628      	mov	r0, r5
 8002e8c:	f000 f8ac 	bl	8002fe8 <_sbrk_r>
 8002e90:	3001      	adds	r0, #1
 8002e92:	d101      	bne.n	8002e98 <sbrk_aligned+0x38>
 8002e94:	f04f 34ff 	mov.w	r4, #4294967295
 8002e98:	4620      	mov	r0, r4
 8002e9a:	bd70      	pop	{r4, r5, r6, pc}
 8002e9c:	200000d0 	.word	0x200000d0

08002ea0 <_malloc_r>:
 8002ea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ea4:	1ccd      	adds	r5, r1, #3
 8002ea6:	f025 0503 	bic.w	r5, r5, #3
 8002eaa:	3508      	adds	r5, #8
 8002eac:	2d0c      	cmp	r5, #12
 8002eae:	bf38      	it	cc
 8002eb0:	250c      	movcc	r5, #12
 8002eb2:	2d00      	cmp	r5, #0
 8002eb4:	4607      	mov	r7, r0
 8002eb6:	db01      	blt.n	8002ebc <_malloc_r+0x1c>
 8002eb8:	42a9      	cmp	r1, r5
 8002eba:	d905      	bls.n	8002ec8 <_malloc_r+0x28>
 8002ebc:	230c      	movs	r3, #12
 8002ebe:	2600      	movs	r6, #0
 8002ec0:	603b      	str	r3, [r7, #0]
 8002ec2:	4630      	mov	r0, r6
 8002ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002ec8:	4e2e      	ldr	r6, [pc, #184]	; (8002f84 <_malloc_r+0xe4>)
 8002eca:	f000 f89d 	bl	8003008 <__malloc_lock>
 8002ece:	6833      	ldr	r3, [r6, #0]
 8002ed0:	461c      	mov	r4, r3
 8002ed2:	bb34      	cbnz	r4, 8002f22 <_malloc_r+0x82>
 8002ed4:	4629      	mov	r1, r5
 8002ed6:	4638      	mov	r0, r7
 8002ed8:	f7ff ffc2 	bl	8002e60 <sbrk_aligned>
 8002edc:	1c43      	adds	r3, r0, #1
 8002ede:	4604      	mov	r4, r0
 8002ee0:	d14d      	bne.n	8002f7e <_malloc_r+0xde>
 8002ee2:	6834      	ldr	r4, [r6, #0]
 8002ee4:	4626      	mov	r6, r4
 8002ee6:	2e00      	cmp	r6, #0
 8002ee8:	d140      	bne.n	8002f6c <_malloc_r+0xcc>
 8002eea:	6823      	ldr	r3, [r4, #0]
 8002eec:	4631      	mov	r1, r6
 8002eee:	4638      	mov	r0, r7
 8002ef0:	eb04 0803 	add.w	r8, r4, r3
 8002ef4:	f000 f878 	bl	8002fe8 <_sbrk_r>
 8002ef8:	4580      	cmp	r8, r0
 8002efa:	d13a      	bne.n	8002f72 <_malloc_r+0xd2>
 8002efc:	6821      	ldr	r1, [r4, #0]
 8002efe:	3503      	adds	r5, #3
 8002f00:	1a6d      	subs	r5, r5, r1
 8002f02:	f025 0503 	bic.w	r5, r5, #3
 8002f06:	3508      	adds	r5, #8
 8002f08:	2d0c      	cmp	r5, #12
 8002f0a:	bf38      	it	cc
 8002f0c:	250c      	movcc	r5, #12
 8002f0e:	4638      	mov	r0, r7
 8002f10:	4629      	mov	r1, r5
 8002f12:	f7ff ffa5 	bl	8002e60 <sbrk_aligned>
 8002f16:	3001      	adds	r0, #1
 8002f18:	d02b      	beq.n	8002f72 <_malloc_r+0xd2>
 8002f1a:	6823      	ldr	r3, [r4, #0]
 8002f1c:	442b      	add	r3, r5
 8002f1e:	6023      	str	r3, [r4, #0]
 8002f20:	e00e      	b.n	8002f40 <_malloc_r+0xa0>
 8002f22:	6822      	ldr	r2, [r4, #0]
 8002f24:	1b52      	subs	r2, r2, r5
 8002f26:	d41e      	bmi.n	8002f66 <_malloc_r+0xc6>
 8002f28:	2a0b      	cmp	r2, #11
 8002f2a:	d916      	bls.n	8002f5a <_malloc_r+0xba>
 8002f2c:	1961      	adds	r1, r4, r5
 8002f2e:	42a3      	cmp	r3, r4
 8002f30:	6025      	str	r5, [r4, #0]
 8002f32:	bf18      	it	ne
 8002f34:	6059      	strne	r1, [r3, #4]
 8002f36:	6863      	ldr	r3, [r4, #4]
 8002f38:	bf08      	it	eq
 8002f3a:	6031      	streq	r1, [r6, #0]
 8002f3c:	5162      	str	r2, [r4, r5]
 8002f3e:	604b      	str	r3, [r1, #4]
 8002f40:	4638      	mov	r0, r7
 8002f42:	f104 060b 	add.w	r6, r4, #11
 8002f46:	f000 f865 	bl	8003014 <__malloc_unlock>
 8002f4a:	f026 0607 	bic.w	r6, r6, #7
 8002f4e:	1d23      	adds	r3, r4, #4
 8002f50:	1af2      	subs	r2, r6, r3
 8002f52:	d0b6      	beq.n	8002ec2 <_malloc_r+0x22>
 8002f54:	1b9b      	subs	r3, r3, r6
 8002f56:	50a3      	str	r3, [r4, r2]
 8002f58:	e7b3      	b.n	8002ec2 <_malloc_r+0x22>
 8002f5a:	6862      	ldr	r2, [r4, #4]
 8002f5c:	42a3      	cmp	r3, r4
 8002f5e:	bf0c      	ite	eq
 8002f60:	6032      	streq	r2, [r6, #0]
 8002f62:	605a      	strne	r2, [r3, #4]
 8002f64:	e7ec      	b.n	8002f40 <_malloc_r+0xa0>
 8002f66:	4623      	mov	r3, r4
 8002f68:	6864      	ldr	r4, [r4, #4]
 8002f6a:	e7b2      	b.n	8002ed2 <_malloc_r+0x32>
 8002f6c:	4634      	mov	r4, r6
 8002f6e:	6876      	ldr	r6, [r6, #4]
 8002f70:	e7b9      	b.n	8002ee6 <_malloc_r+0x46>
 8002f72:	230c      	movs	r3, #12
 8002f74:	4638      	mov	r0, r7
 8002f76:	603b      	str	r3, [r7, #0]
 8002f78:	f000 f84c 	bl	8003014 <__malloc_unlock>
 8002f7c:	e7a1      	b.n	8002ec2 <_malloc_r+0x22>
 8002f7e:	6025      	str	r5, [r4, #0]
 8002f80:	e7de      	b.n	8002f40 <_malloc_r+0xa0>
 8002f82:	bf00      	nop
 8002f84:	200000cc 	.word	0x200000cc

08002f88 <_realloc_r>:
 8002f88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f8c:	4680      	mov	r8, r0
 8002f8e:	4614      	mov	r4, r2
 8002f90:	460e      	mov	r6, r1
 8002f92:	b921      	cbnz	r1, 8002f9e <_realloc_r+0x16>
 8002f94:	4611      	mov	r1, r2
 8002f96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002f9a:	f7ff bf81 	b.w	8002ea0 <_malloc_r>
 8002f9e:	b92a      	cbnz	r2, 8002fac <_realloc_r+0x24>
 8002fa0:	f7ff ff16 	bl	8002dd0 <_free_r>
 8002fa4:	4625      	mov	r5, r4
 8002fa6:	4628      	mov	r0, r5
 8002fa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002fac:	f000 f838 	bl	8003020 <_malloc_usable_size_r>
 8002fb0:	4284      	cmp	r4, r0
 8002fb2:	4607      	mov	r7, r0
 8002fb4:	d802      	bhi.n	8002fbc <_realloc_r+0x34>
 8002fb6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002fba:	d812      	bhi.n	8002fe2 <_realloc_r+0x5a>
 8002fbc:	4621      	mov	r1, r4
 8002fbe:	4640      	mov	r0, r8
 8002fc0:	f7ff ff6e 	bl	8002ea0 <_malloc_r>
 8002fc4:	4605      	mov	r5, r0
 8002fc6:	2800      	cmp	r0, #0
 8002fc8:	d0ed      	beq.n	8002fa6 <_realloc_r+0x1e>
 8002fca:	42bc      	cmp	r4, r7
 8002fcc:	4622      	mov	r2, r4
 8002fce:	4631      	mov	r1, r6
 8002fd0:	bf28      	it	cs
 8002fd2:	463a      	movcs	r2, r7
 8002fd4:	f7ff fed4 	bl	8002d80 <memcpy>
 8002fd8:	4631      	mov	r1, r6
 8002fda:	4640      	mov	r0, r8
 8002fdc:	f7ff fef8 	bl	8002dd0 <_free_r>
 8002fe0:	e7e1      	b.n	8002fa6 <_realloc_r+0x1e>
 8002fe2:	4635      	mov	r5, r6
 8002fe4:	e7df      	b.n	8002fa6 <_realloc_r+0x1e>
	...

08002fe8 <_sbrk_r>:
 8002fe8:	b538      	push	{r3, r4, r5, lr}
 8002fea:	2300      	movs	r3, #0
 8002fec:	4d05      	ldr	r5, [pc, #20]	; (8003004 <_sbrk_r+0x1c>)
 8002fee:	4604      	mov	r4, r0
 8002ff0:	4608      	mov	r0, r1
 8002ff2:	602b      	str	r3, [r5, #0]
 8002ff4:	f7fd fe06 	bl	8000c04 <_sbrk>
 8002ff8:	1c43      	adds	r3, r0, #1
 8002ffa:	d102      	bne.n	8003002 <_sbrk_r+0x1a>
 8002ffc:	682b      	ldr	r3, [r5, #0]
 8002ffe:	b103      	cbz	r3, 8003002 <_sbrk_r+0x1a>
 8003000:	6023      	str	r3, [r4, #0]
 8003002:	bd38      	pop	{r3, r4, r5, pc}
 8003004:	200000d4 	.word	0x200000d4

08003008 <__malloc_lock>:
 8003008:	4801      	ldr	r0, [pc, #4]	; (8003010 <__malloc_lock+0x8>)
 800300a:	f000 b811 	b.w	8003030 <__retarget_lock_acquire_recursive>
 800300e:	bf00      	nop
 8003010:	200000d8 	.word	0x200000d8

08003014 <__malloc_unlock>:
 8003014:	4801      	ldr	r0, [pc, #4]	; (800301c <__malloc_unlock+0x8>)
 8003016:	f000 b80c 	b.w	8003032 <__retarget_lock_release_recursive>
 800301a:	bf00      	nop
 800301c:	200000d8 	.word	0x200000d8

08003020 <_malloc_usable_size_r>:
 8003020:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003024:	1f18      	subs	r0, r3, #4
 8003026:	2b00      	cmp	r3, #0
 8003028:	bfbc      	itt	lt
 800302a:	580b      	ldrlt	r3, [r1, r0]
 800302c:	18c0      	addlt	r0, r0, r3
 800302e:	4770      	bx	lr

08003030 <__retarget_lock_acquire_recursive>:
 8003030:	4770      	bx	lr

08003032 <__retarget_lock_release_recursive>:
 8003032:	4770      	bx	lr

08003034 <_init>:
 8003034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003036:	bf00      	nop
 8003038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800303a:	bc08      	pop	{r3}
 800303c:	469e      	mov	lr, r3
 800303e:	4770      	bx	lr

08003040 <_fini>:
 8003040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003042:	bf00      	nop
 8003044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003046:	bc08      	pop	{r3}
 8003048:	469e      	mov	lr, r3
 800304a:	4770      	bx	lr
